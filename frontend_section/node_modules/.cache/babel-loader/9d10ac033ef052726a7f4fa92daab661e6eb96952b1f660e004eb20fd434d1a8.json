{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\somna\\\\Documents\\\\Java_Backend\\\\Banking\\\\frontend_section\\\\src\\\\utils\\\\formatters.js\";\n// --- src/utils/formatters.js ---\nimport React from 'react';\nimport Chip from '@mui/material/Chip';\n\n/**\r\n * Formats a date string (or Date object) into a more readable date format.\r\n * Example: \"Jan 1, 2023\"\r\n * @param {string | Date} dateString - The date string or Date object to format.\r\n * @returns {string} Formatted date string or 'N/A' if invalid.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const formatDate = dateString => {\n  if (!dateString) return 'N/A';\n  try {\n    const date = new Date(dateString);\n    // Check if the date is valid after parsing\n    if (isNaN(date.getTime())) {\n      throw new Error('Invalid date value');\n    }\n    return date.toLocaleDateString('en-IN', {\n      // Use Indian English locale for DD/MM/YYYY or similar\n      year: 'numeric',\n      month: 'short',\n      // 'Jan', 'Feb', etc.\n      day: 'numeric'\n    });\n  } catch (e) {\n    console.error(\"Error formatting date:\", dateString, e);\n    return 'Invalid Date';\n  }\n};\n\n/**\r\n * Formats a date-time string (or Date object) into a more readable date and time format.\r\n * Example: \"Jan 1, 2023, 10:30 AM\"\r\n * @param {string | Date} dateTimeString - The date-time string or Date object to format.\r\n * @returns {string} Formatted date-time string or 'N/A' if invalid.\r\n */\nexport const formatDateTime = dateTimeString => {\n  if (!dateTimeString) return 'N/A';\n  try {\n    const date = new Date(dateTimeString);\n    if (isNaN(date.getTime())) {\n      throw new Error('Invalid date-time value');\n    }\n    return date.toLocaleString('en-IN', {\n      // Indian English locale\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: true // Use AM/PM\n    });\n  } catch (e) {\n    console.error(\"Error formatting datetime:\", dateTimeString, e);\n    return 'Invalid DateTime';\n  }\n};\n\n/**\r\n * Formats a number into a currency string (Indian Rupees).\r\n * Example: ₹ 1,000.00\r\n * @param {number | string} amount - The amount to format.\r\n * @returns {string} Formatted currency string or 'N/A' if invalid.\r\n */\nexport const formatCurrency = amount => {\n  const numAmount = Number(amount);\n  if (amount === null || amount === undefined || isNaN(numAmount)) return 'N/A';\n  try {\n    return `₹ ${numAmount.toLocaleString('en-IN', {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    })}`;\n  } catch (e) {\n    console.error(\"Error formatting currency:\", amount, e);\n    return 'Invalid Amount';\n  }\n};\n\n/**\r\n * Generates an MUI Chip component styled based on Fixed Deposit status.\r\n * @param {string} status - The status string (e.g., \"PENDING\", \"ACTIVE\").\r\n * @returns {JSX.Element} An MUI Chip component.\r\n */\nexport const getFdStatusChip = status => {\n  let color = 'default';\n  let label = status ? status.toUpperCase() : 'UNKNOWN'; // Ensure consistent casing for matching\n\n  switch (label) {\n    case 'PENDING':\n      color = 'warning';\n      break;\n    case 'ACTIVE':\n      color = 'success';\n      break;\n    case 'REJECTED':\n      color = 'error';\n      break;\n    case 'MATURED':\n      color = 'info';\n      break;\n    case 'CLOSED':\n      color = 'default';\n      break;\n    // You can use 'secondary' or 'grey' from MUI theme\n    default:\n      color = 'default';\n  }\n  return /*#__PURE__*/_jsxDEV(Chip, {\n    label: label,\n    color: color,\n    size: \"small\",\n    variant: \"outlined\",\n    sx: {\n      textTransform: 'capitalize',\n      fontWeight: 500\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 12\n  }, this);\n};\n\n/**\r\n * Generates an MUI Chip component styled based on Loan Application status.\r\n * @param {string} status - The status string (e.g., \"PENDING\", \"APPROVED\").\r\n * @returns {JSX.Element} An MUI Chip component.\r\n */\nexport const getLoanStatusChip = status => {\n  let color = 'default';\n  let label = status ? status.toUpperCase().replace('_', ' ') : 'UNKNOWN'; // Handle potential underscores\n\n  switch (status ? status.toUpperCase() : '') {\n    // Match against uppercase status\n    case 'PENDING':\n      color = 'warning';\n      break;\n    case 'UNDER_REVIEW':\n      color = 'info';\n      break;\n    case 'APPROVED':\n      color = 'success';\n      break;\n    case 'REJECTED':\n      color = 'error';\n      break;\n    case 'DISBURSED':\n      color = 'primary';\n      break;\n    // Or another distinct color\n    case 'CLOSED':\n      color = 'default';\n      break;\n    // Or 'secondary'\n    default:\n      color = 'default';\n  }\n  return /*#__PURE__*/_jsxDEV(Chip, {\n    label: label,\n    color: color,\n    size: \"small\",\n    variant: \"outlined\",\n    sx: {\n      textTransform: 'capitalize',\n      fontWeight: 500\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 12\n  }, this);\n};","map":{"version":3,"names":["React","Chip","jsxDEV","_jsxDEV","formatDate","dateString","date","Date","isNaN","getTime","Error","toLocaleDateString","year","month","day","e","console","error","formatDateTime","dateTimeString","toLocaleString","hour","minute","hour12","formatCurrency","amount","numAmount","Number","undefined","minimumFractionDigits","maximumFractionDigits","getFdStatusChip","status","color","label","toUpperCase","size","variant","sx","textTransform","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","getLoanStatusChip","replace"],"sources":["C:/Users/somna/Documents/Java_Backend/Banking/frontend_section/src/utils/formatters.js"],"sourcesContent":["// --- src/utils/formatters.js ---\r\nimport React from 'react';\r\nimport Chip from '@mui/material/Chip';\r\n\r\n/**\r\n * Formats a date string (or Date object) into a more readable date format.\r\n * Example: \"Jan 1, 2023\"\r\n * @param {string | Date} dateString - The date string or Date object to format.\r\n * @returns {string} Formatted date string or 'N/A' if invalid.\r\n */\r\nexport const formatDate = (dateString) => {\r\n    if (!dateString) return 'N/A';\r\n    try {\r\n        const date = new Date(dateString);\r\n        // Check if the date is valid after parsing\r\n        if (isNaN(date.getTime())) {\r\n            throw new Error('Invalid date value');\r\n        }\r\n        return date.toLocaleDateString('en-IN', { // Use Indian English locale for DD/MM/YYYY or similar\r\n            year: 'numeric',\r\n            month: 'short', // 'Jan', 'Feb', etc.\r\n            day: 'numeric'\r\n        });\r\n    } catch (e) {\r\n        console.error(\"Error formatting date:\", dateString, e);\r\n        return 'Invalid Date';\r\n    }\r\n};\r\n\r\n/**\r\n * Formats a date-time string (or Date object) into a more readable date and time format.\r\n * Example: \"Jan 1, 2023, 10:30 AM\"\r\n * @param {string | Date} dateTimeString - The date-time string or Date object to format.\r\n * @returns {string} Formatted date-time string or 'N/A' if invalid.\r\n */\r\nexport const formatDateTime = (dateTimeString) => {\r\n    if (!dateTimeString) return 'N/A';\r\n    try {\r\n        const date = new Date(dateTimeString);\r\n        if (isNaN(date.getTime())) {\r\n            throw new Error('Invalid date-time value');\r\n        }\r\n        return date.toLocaleString('en-IN', { // Indian English locale\r\n            year: 'numeric',\r\n            month: 'short',\r\n            day: 'numeric',\r\n            hour: '2-digit',\r\n            minute: '2-digit',\r\n            hour12: true // Use AM/PM\r\n        });\r\n    } catch (e) {\r\n        console.error(\"Error formatting datetime:\", dateTimeString, e);\r\n        return 'Invalid DateTime';\r\n    }\r\n};\r\n\r\n/**\r\n * Formats a number into a currency string (Indian Rupees).\r\n * Example: ₹ 1,000.00\r\n * @param {number | string} amount - The amount to format.\r\n * @returns {string} Formatted currency string or 'N/A' if invalid.\r\n */\r\nexport const formatCurrency = (amount) => {\r\n    const numAmount = Number(amount);\r\n    if (amount === null || amount === undefined || isNaN(numAmount)) return 'N/A';\r\n    try {\r\n        return `₹ ${numAmount.toLocaleString('en-IN', {\r\n            minimumFractionDigits: 2,\r\n            maximumFractionDigits: 2\r\n        })}`;\r\n    } catch (e) {\r\n        console.error(\"Error formatting currency:\", amount, e);\r\n        return 'Invalid Amount';\r\n    }\r\n};\r\n\r\n/**\r\n * Generates an MUI Chip component styled based on Fixed Deposit status.\r\n * @param {string} status - The status string (e.g., \"PENDING\", \"ACTIVE\").\r\n * @returns {JSX.Element} An MUI Chip component.\r\n */\r\nexport const getFdStatusChip = (status) => {\r\n    let color = 'default';\r\n    let label = status ? status.toUpperCase() : 'UNKNOWN'; // Ensure consistent casing for matching\r\n\r\n    switch (label) {\r\n        case 'PENDING': color = 'warning'; break;\r\n        case 'ACTIVE': color = 'success'; break;\r\n        case 'REJECTED': color = 'error'; break;\r\n        case 'MATURED': color = 'info'; break;\r\n        case 'CLOSED': color = 'default'; break; // You can use 'secondary' or 'grey' from MUI theme\r\n        default: color = 'default';\r\n    }\r\n    return <Chip label={label} color={color} size=\"small\" variant=\"outlined\" sx={{ textTransform: 'capitalize', fontWeight: 500 }} />;\r\n};\r\n\r\n/**\r\n * Generates an MUI Chip component styled based on Loan Application status.\r\n * @param {string} status - The status string (e.g., \"PENDING\", \"APPROVED\").\r\n * @returns {JSX.Element} An MUI Chip component.\r\n */\r\nexport const getLoanStatusChip = (status) => {\r\n    let color = 'default';\r\n    let label = status ? status.toUpperCase().replace('_', ' ') : 'UNKNOWN'; // Handle potential underscores\r\n\r\n    switch (status ? status.toUpperCase() : '') { // Match against uppercase status\r\n        case 'PENDING': color = 'warning'; break;\r\n        case 'UNDER_REVIEW': color = 'info'; break;\r\n        case 'APPROVED': color = 'success'; break;\r\n        case 'REJECTED': color = 'error'; break;\r\n        case 'DISBURSED': color = 'primary'; break; // Or another distinct color\r\n        case 'CLOSED': color = 'default'; break; // Or 'secondary'\r\n        default: color = 'default';\r\n    }\r\n    return <Chip label={label} color={color} size=\"small\" variant=\"outlined\" sx={{ textTransform: 'capitalize', fontWeight: 500 }} />;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}