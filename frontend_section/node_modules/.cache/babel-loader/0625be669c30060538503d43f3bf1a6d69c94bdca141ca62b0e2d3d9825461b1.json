{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\somna\\\\Documents\\\\Java_Backend\\\\Banking\\\\frontend_section\\\\src\\\\component\\\\Page\\\\TransferMoney.js\",\n  _s = $RefreshSig$();\n// --- src/component/Page/SimplifiedTransferPage.js ---\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Container, Paper, Typography, TextField, Button, Box, CircularProgress, Alert } from '@mui/material';\nimport { useAuth } from '../../context/AuthContext';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:8080';\nconst SimplifiedTransferPage = () => {\n  _s();\n  const {\n    authState\n  } = useAuth(); // Get authState (including potentially customerId, mobileNumber)\n  const navigate = useNavigate();\n  const [formData, setFormData] = useState({\n    amount: '',\n    senderPassword: '',\n    receiverCustomerId: '',\n    receiverMobileNo: ''\n  });\n  const [senderDetails, setSenderDetails] = useState({\n    // State to display sender info\n    customerId: authState.customerId || 'N/A',\n    mobileNumber: authState.mobileNumber || 'N/A',\n    balance: null // Fetch actual balance on mount\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [isFetchingBalance, setIsFetchingBalance] = useState(false);\n  const [message, setMessage] = useState('');\n  const [messageSeverity, setMessageSeverity] = useState('info');\n\n  // Effect to fetch sender's balance and update display details on login/mount\n  useEffect(() => {\n    const fetchSenderBalance = async () => {\n      if (!authState.isLoggedIn || !authState.customerId) {\n        setSenderDetails({\n          customerId: 'N/A',\n          mobileNumber: 'N/A',\n          balance: null\n        });\n        setMessage(\"Please log in to transfer money.\");\n        setMessageSeverity(\"warning\");\n        return;\n      }\n      setIsFetchingBalance(true);\n      setMessage(''); // Clear messages on load\n\n      // Ensure senderDetails state uses correct authenticated ID and mobile number from authState\n      setSenderDetails(prev => ({\n        ...prev,\n        customerId: authState.customerId,\n        mobileNumber: authState.mobileNumber || 'Fetching...' // Use mobile from authState if available\n      }));\n      try {\n        // Call the existing check-balance endpoint\n        const response = await axios.get(`${API_BASE_URL}/transfer`, {\n          withCredentials: true // Send session cookie\n          // No customerId param needed here as backend gets it from session\n        });\n        if (response.data && response.data.success === true && response.data.balance !== undefined) {\n          const fetchedBalance = parseFloat(response.data.balance);\n          if (!isNaN(fetchedBalance)) {\n            setSenderDetails(prev => ({\n              ...prev,\n              balance: fetchedBalance\n            }));\n            //setMessage(\"Sender balance fetched.\");\n            //setMessageSeverity(\"info\"); // Optional message\n          } else {\n            console.error(\"Received non-numeric balance for sender:\", response.data.balance);\n            setSenderDetails(prev => ({\n              ...prev,\n              balance: null\n            }));\n            setMessage(\"Could not fetch sender balance.\");\n            setMessageSeverity(\"warning\");\n          }\n        } else {\n          var _response$data;\n          const errorMsg = ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.message) || \"Failed to retrieve sender balance.\";\n          console.error(\"Sender balance fetch failed:\", errorMsg, response.data);\n          setSenderDetails(prev => ({\n            ...prev,\n            balance: null\n          }));\n          setMessage(`Could not fetch sender balance: ${errorMsg}`);\n          setMessageSeverity(\"warning\");\n        }\n      } catch (error) {\n        console.error('Error fetching sender balance:', error);\n        setSenderDetails(prev => ({\n          ...prev,\n          balance: null\n        }));\n        if (error.response) {\n          var _error$response$data;\n          const errorMsg = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || `Error: ${error.response.status}`;\n          setMessage(`Could not fetch sender balance: ${errorMsg}`);\n          setMessageSeverity(\"warning\");\n        } else {\n          setMessage(\"Could not fetch sender balance: Network error.\");\n          setMessageSeverity(\"warning\");\n        }\n      } finally {\n        setIsFetchingBalance(false);\n      }\n    };\n    fetchSenderBalance(); // Fetch balance when component mounts or login state changes\n  }, [authState.isLoggedIn, authState.customerId, authState.mobileNumber]); // Re-run when login state or authState ID/mobile changes\n\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n  };\n  const handleTransfer = async e => {\n    e.preventDefault(); // Prevent default form submission\n\n    if (!authState.isLoggedIn) {\n      setMessage(\"Please log in to transfer money.\");\n      setMessageSeverity(\"warning\");\n      return;\n    }\n\n    // Basic frontend validation\n    if (parseFloat(formData.amount) <= 0 || !formData.receiverCustomerId || !formData.receiverMobileNo || !formData.senderPassword) {\n      setMessage(\"Please fill in all required fields and ensure amount is positive.\");\n      setMessageSeverity(\"warning\");\n      return;\n    }\n    if (senderDetails.balance !== null && parseFloat(formData.amount) > senderDetails.balance) {\n      setMessage(\"Insufficient balance for transfer.\");\n      setMessageSeverity(\"warning\");\n      return;\n    }\n    setIsLoading(true);\n    setMessage(''); // Clear previous messages\n    setMessageSeverity('info'); // Reset severity\n\n    // Prepare the request body for the simplified endpoint\n    const requestBody = {\n      amount: parseFloat(formData.amount),\n      // Convert amount to number\n      senderPassword: formData.senderPassword,\n      receiverCustomerId: formData.receiverCustomerId,\n      receiverMobileNo: formData.receiverMobileNo\n    };\n    console.log(\"Sending Simplified Transfer Request:\", requestBody);\n    try {\n      const response = await axios.post(`${API_BASE_URL}/transfer-simple`, requestBody, {\n        withCredentials: true,\n        // Important for sending the session cookie\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log(\"Simplified Transfer Raw Response:\", response);\n      if (response.data && response.data.success === true) {\n        setMessage(`Transfer successful! ${response.data.message}`);\n        setMessageSeverity(\"success\");\n        // Clear form fields after success (except sender info display)\n        setFormData({\n          amount: '',\n          senderPassword: '',\n          receiverCustomerId: '',\n          receiverMobileNo: ''\n        });\n        // Refresh sender's balance after successful transfer\n        // This triggers the useEffect again\n        setSenderDetails(prev => ({\n          ...prev,\n          balance: null\n        })); // Reset balance state to show loading/refetching\n      } else {\n        var _response$data2;\n        const errorMsg = ((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.message) || \"Transfer failed. Unexpected response format.\";\n        console.error(\"Simplified Transfer failed:\", errorMsg, response.data);\n        setMessage(`Transfer failed: ${errorMsg}`);\n        setMessageSeverity(\"error\"); // Assuming any non-success is an error\n      }\n    } catch (error) {\n      console.error('Error during simplified transfer:', error);\n      if (error.response) {\n        const errorData = error.response.data;\n        const errorMsg = (errorData === null || errorData === void 0 ? void 0 : errorData.message) || `Error: ${error.response.status}. Please check details.`;\n        setMessage(`Transfer failed: ${errorMsg}`);\n        setMessageSeverity(\"error\");\n        // Specific error statuses handling\n        if (error.response.status === 401 || error.response.status === 403) {\n          setMessage(`Transfer failed: Authentication error. Please log in again. ${errorMsg}`);\n        } else if (error.response.status === 400) {\n          // Bad Request (e.g., insufficient funds, validation errors)\n          setMessage(`Transfer failed: ${errorMsg}`); // Backend message is often user-friendly here\n        } else if (error.response.status === 404) {\n          // Not Found (e.g., receiver not found)\n          setMessage(`Transfer failed: ${errorMsg}`); // Backend message\n        }\n      } else if (error.request) {\n        setMessage(\"Transfer failed: Network error. Could not reach the server.\");\n        setMessageSeverity(\"error\");\n      } else {\n        setMessage(\"Transfer failed: An unexpected error occurred.\");\n        setMessageSeverity(\"error\");\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Show \"Please log in\" message if not logged in\n  if (!authState.isLoggedIn) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"sm\",\n      sx: {\n        mt: 4\n      },\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 3,\n        sx: {\n          p: 3,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          component: \"h1\",\n          gutterBottom: true,\n          children: \"Transfer Money\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"warning\",\n          sx: {\n            width: '100%',\n            mt: 2\n          },\n          children: \"Please log in to transfer money.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 18\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 14\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"sm\",\n    sx: {\n      mt: 4\n    },\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 3,\n      sx: {\n        p: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        component: \"h1\",\n        gutterBottom: true,\n        textAlign: \"center\",\n        children: \"Transfer Money\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          my: 2,\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Your Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 21\n        }, this), isFetchingBalance ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 20\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 26\n        }, this) : senderDetails.balance !== null ? /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          color: \"primary\",\n          sx: {\n            fontWeight: 'bold'\n          },\n          children: [\"Balance: \\u20B9\", senderDetails.balance.toLocaleString('en-IN', {\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 26\n        }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          children: \"Could not load balance.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          children: [\"ID: \", senderDetails.customerId]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          children: [\"Mobile: \", senderDetails.mobileNumber]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        component: \"form\",\n        onSubmit: handleTransfer,\n        sx: {\n          mt: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          sx: {\n            mt: 2\n          },\n          children: \"Transfer Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Your Password (Sender)\",\n          type: \"password\",\n          name: \"senderPassword\",\n          value: formData.senderPassword,\n          onChange: handleInputChange,\n          fullWidth: true,\n          margin: \"normal\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Amount to Transfer\",\n          type: \"number\",\n          name: \"amount\",\n          value: formData.amount,\n          onChange: handleInputChange,\n          fullWidth: true,\n          margin: \"normal\",\n          required: true,\n          inputProps: {\n            min: \"0.01\",\n            step: \"0.01\"\n          } // Ensure positive amount\n          ,\n          helperText: senderDetails.balance !== null ? `Current Balance: ₹${senderDetails.balance.toFixed(2)}` : '',\n          error: senderDetails.balance !== null && parseFloat(formData.amount) > senderDetails.balance // Indicate insufficient funds\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          sx: {\n            mt: 3\n          },\n          children: \"Receiver Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Receiver Customer ID\",\n          name: \"receiverCustomerId\",\n          value: formData.receiverCustomerId,\n          onChange: handleInputChange,\n          fullWidth: true,\n          margin: \"normal\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Receiver Mobile Number\",\n          name: \"receiverMobileNo\",\n          value: formData.receiverMobileNo,\n          onChange: handleInputChange,\n          fullWidth: true,\n          margin: \"normal\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 21\n        }, this), message && /*#__PURE__*/_jsxDEV(Alert, {\n          severity: messageSeverity,\n          sx: {\n            mt: 2\n          },\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"contained\",\n          color: \"primary\",\n          fullWidth: true,\n          size: \"large\",\n          sx: {\n            mt: 3\n          },\n          disabled: isLoading || !authState.isLoggedIn || isFetchingBalance || senderDetails.balance !== null && parseFloat(formData.amount) > senderDetails.balance || parseFloat(formData.amount) <= 0 || !formData.receiverCustomerId || !formData.receiverMobileNo || !formData.senderPassword // Disable if loading, not logged in, balance fetching, insufficient funds, or fields missing\n          ,\n          children: isLoading ? 'Transferring...' : 'Transfer Money'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 21\n        }, this), messageSeverity === 'success' && /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          color: \"primary\",\n          fullWidth: true,\n          size: \"large\",\n          sx: {\n            mt: 2\n          },\n          onClick: () => navigate('/check-balance'),\n          children: \"Check Updated Balance\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 9\n  }, this);\n};\n_s(SimplifiedTransferPage, \"MEsqk/wk3n3hPpwSYWYgQVU396s=\", false, function () {\n  return [useAuth, useNavigate];\n});\n_c = SimplifiedTransferPage;\nexport default SimplifiedTransferPage;\nvar _c;\n$RefreshReg$(_c, \"SimplifiedTransferPage\");","map":{"version":3,"names":["React","useState","useEffect","axios","Container","Paper","Typography","TextField","Button","Box","CircularProgress","Alert","useAuth","useNavigate","jsxDEV","_jsxDEV","API_BASE_URL","SimplifiedTransferPage","_s","authState","navigate","formData","setFormData","amount","senderPassword","receiverCustomerId","receiverMobileNo","senderDetails","setSenderDetails","customerId","mobileNumber","balance","isLoading","setIsLoading","isFetchingBalance","setIsFetchingBalance","message","setMessage","messageSeverity","setMessageSeverity","fetchSenderBalance","isLoggedIn","prev","response","get","withCredentials","data","success","undefined","fetchedBalance","parseFloat","isNaN","console","error","_response$data","errorMsg","_error$response$data","status","handleInputChange","e","name","value","target","handleTransfer","preventDefault","requestBody","log","post","headers","_response$data2","errorData","request","maxWidth","sx","mt","children","elevation","p","display","flexDirection","alignItems","variant","component","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","severity","width","textAlign","my","size","color","fontWeight","toLocaleString","minimumFractionDigits","maximumFractionDigits","onSubmit","label","type","onChange","fullWidth","margin","required","inputProps","min","step","helperText","toFixed","disabled","onClick","_c","$RefreshReg$"],"sources":["C:/Users/somna/Documents/Java_Backend/Banking/frontend_section/src/component/Page/TransferMoney.js"],"sourcesContent":["// --- src/component/Page/SimplifiedTransferPage.js ---\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Container, Paper, Typography, TextField, Button, Box, CircularProgress, Alert } from '@mui/material';\r\nimport { useAuth } from '../../context/AuthContext';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst API_BASE_URL = 'http://localhost:8080';\r\n\r\nconst SimplifiedTransferPage = () => {\r\n    const { authState } = useAuth(); // Get authState (including potentially customerId, mobileNumber)\r\n    const navigate = useNavigate();\r\n\r\n    const [formData, setFormData] = useState({\r\n        amount: '',\r\n        senderPassword: '',\r\n        receiverCustomerId: '',\r\n        receiverMobileNo: ''\r\n    });\r\n\r\n    const [senderDetails, setSenderDetails] = useState({ // State to display sender info\r\n        customerId: authState.customerId || 'N/A',\r\n        mobileNumber: authState.mobileNumber || 'N/A',\r\n        balance: null // Fetch actual balance on mount\r\n    });\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [isFetchingBalance, setIsFetchingBalance] = useState(false);\r\n    const [message, setMessage] = useState('');\r\n    const [messageSeverity, setMessageSeverity] = useState('info');\r\n\r\n    // Effect to fetch sender's balance and update display details on login/mount\r\n    useEffect(() => {\r\n        const fetchSenderBalance = async () => {\r\n            if (!authState.isLoggedIn || !authState.customerId) {\r\n                setSenderDetails({ customerId: 'N/A', mobileNumber: 'N/A', balance: null });\r\n                 setMessage(\"Please log in to transfer money.\");\r\n                 setMessageSeverity(\"warning\");\r\n                 return;\r\n            }\r\n\r\n            setIsFetchingBalance(true);\r\n             setMessage(''); // Clear messages on load\r\n\r\n            // Ensure senderDetails state uses correct authenticated ID and mobile number from authState\r\n            setSenderDetails(prev => ({\r\n                 ...prev,\r\n                 customerId: authState.customerId,\r\n                 mobileNumber: authState.mobileNumber || 'Fetching...' // Use mobile from authState if available\r\n             }));\r\n\r\n\r\n            try {\r\n                // Call the existing check-balance endpoint\r\n                const response = await axios.get(`${API_BASE_URL}/transfer`, {\r\n                     withCredentials: true // Send session cookie\r\n                     // No customerId param needed here as backend gets it from session\r\n                });\r\n\r\n                if (response.data && response.data.success === true && response.data.balance !== undefined) {\r\n                    const fetchedBalance = parseFloat(response.data.balance);\r\n                    if (!isNaN(fetchedBalance)) {\r\n                        setSenderDetails(prev => ({ ...prev, balance: fetchedBalance }));\r\n                         //setMessage(\"Sender balance fetched.\");\r\n                         //setMessageSeverity(\"info\"); // Optional message\r\n                    } else {\r\n                         console.error(\"Received non-numeric balance for sender:\", response.data.balance);\r\n                         setSenderDetails(prev => ({ ...prev, balance: null }));\r\n                         setMessage(\"Could not fetch sender balance.\");\r\n                         setMessageSeverity(\"warning\");\r\n                     }\r\n                } else {\r\n                     const errorMsg = response.data?.message || \"Failed to retrieve sender balance.\";\r\n                     console.error(\"Sender balance fetch failed:\", errorMsg, response.data);\r\n                     setSenderDetails(prev => ({ ...prev, balance: null }));\r\n                     setMessage(`Could not fetch sender balance: ${errorMsg}`);\r\n                     setMessageSeverity(\"warning\");\r\n                 }\r\n            } catch (error) {\r\n                 console.error('Error fetching sender balance:', error);\r\n                 setSenderDetails(prev => ({ ...prev, balance: null }));\r\n                 if (error.response) {\r\n                     const errorMsg = error.response.data?.message || `Error: ${error.response.status}`;\r\n                     setMessage(`Could not fetch sender balance: ${errorMsg}`);\r\n                     setMessageSeverity(\"warning\");\r\n                 } else {\r\n                     setMessage(\"Could not fetch sender balance: Network error.\");\r\n                     setMessageSeverity(\"warning\");\r\n                 }\r\n            } finally {\r\n                 setIsFetchingBalance(false);\r\n            }\r\n        };\r\n\r\n         fetchSenderBalance(); // Fetch balance when component mounts or login state changes\r\n\r\n    }, [authState.isLoggedIn, authState.customerId, authState.mobileNumber]); // Re-run when login state or authState ID/mobile changes\r\n\r\n\r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setFormData({\r\n            ...formData,\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n    const handleTransfer = async (e) => {\r\n        e.preventDefault(); // Prevent default form submission\r\n\r\n        if (!authState.isLoggedIn) {\r\n            setMessage(\"Please log in to transfer money.\");\r\n            setMessageSeverity(\"warning\");\r\n            return;\r\n        }\r\n\r\n         // Basic frontend validation\r\n        if (parseFloat(formData.amount) <= 0 || !formData.receiverCustomerId || !formData.receiverMobileNo || !formData.senderPassword) {\r\n             setMessage(\"Please fill in all required fields and ensure amount is positive.\");\r\n             setMessageSeverity(\"warning\");\r\n             return;\r\n         }\r\n         if (senderDetails.balance !== null && parseFloat(formData.amount) > senderDetails.balance) {\r\n              setMessage(\"Insufficient balance for transfer.\");\r\n              setMessageSeverity(\"warning\");\r\n              return;\r\n         }\r\n\r\n\r\n        setIsLoading(true);\r\n        setMessage(''); // Clear previous messages\r\n        setMessageSeverity('info'); // Reset severity\r\n\r\n        // Prepare the request body for the simplified endpoint\r\n        const requestBody = {\r\n            amount: parseFloat(formData.amount), // Convert amount to number\r\n            senderPassword: formData.senderPassword,\r\n            receiverCustomerId: formData.receiverCustomerId,\r\n            receiverMobileNo: formData.receiverMobileNo\r\n        };\r\n\r\n        console.log(\"Sending Simplified Transfer Request:\", requestBody);\r\n\r\n        try {\r\n            const response = await axios.post(`${API_BASE_URL}/transfer-simple`, requestBody, {\r\n                withCredentials: true, // Important for sending the session cookie\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n\r\n            console.log(\"Simplified Transfer Raw Response:\", response);\r\n\r\n            if (response.data && response.data.success === true) {\r\n                setMessage(`Transfer successful! ${response.data.message}`);\r\n                setMessageSeverity(\"success\");\r\n                // Clear form fields after success (except sender info display)\r\n                setFormData({\r\n                     amount: '',\r\n                     senderPassword: '',\r\n                     receiverCustomerId: '',\r\n                     receiverMobileNo: ''\r\n                 });\r\n                // Refresh sender's balance after successful transfer\r\n                // This triggers the useEffect again\r\n                 setSenderDetails(prev => ({...prev, balance: null})); // Reset balance state to show loading/refetching\r\n\r\n            } else {\r\n                const errorMsg = response.data?.message || \"Transfer failed. Unexpected response format.\";\r\n                 console.error(\"Simplified Transfer failed:\", errorMsg, response.data);\r\n                setMessage(`Transfer failed: ${errorMsg}`);\r\n                 setMessageSeverity(\"error\"); // Assuming any non-success is an error\r\n            }\r\n        } catch (error) {\r\n            console.error('Error during simplified transfer:', error);\r\n            if (error.response) {\r\n                const errorData = error.response.data;\r\n                const errorMsg = errorData?.message || `Error: ${error.response.status}. Please check details.`;\r\n                setMessage(`Transfer failed: ${errorMsg}`);\r\n                 setMessageSeverity(\"error\");\r\n                // Specific error statuses handling\r\n                 if (error.response.status === 401 || error.response.status === 403) {\r\n                      setMessage(`Transfer failed: Authentication error. Please log in again. ${errorMsg}`);\r\n                  } else if (error.response.status === 400) { // Bad Request (e.g., insufficient funds, validation errors)\r\n                       setMessage(`Transfer failed: ${errorMsg}`); // Backend message is often user-friendly here\r\n                   } else if (error.response.status === 404) { // Not Found (e.g., receiver not found)\r\n                        setMessage(`Transfer failed: ${errorMsg}`); // Backend message\r\n                   }\r\n            } else if (error.request) {\r\n                setMessage(\"Transfer failed: Network error. Could not reach the server.\");\r\n                 setMessageSeverity(\"error\");\r\n            } else {\r\n                setMessage(\"Transfer failed: An unexpected error occurred.\");\r\n                 setMessageSeverity(\"error\");\r\n            }\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n     // Show \"Please log in\" message if not logged in\r\n    if (!authState.isLoggedIn) {\r\n        return (\r\n             <Container maxWidth=\"sm\" sx={{ mt: 4 }}>\r\n                 <Paper elevation={3} sx={{ p: 3, display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n                     <Typography variant=\"h4\" component=\"h1\" gutterBottom>\r\n                         Transfer Money\r\n                     </Typography>\r\n                      <Alert severity=\"warning\" sx={{ width: '100%', mt: 2 }}>\r\n                         Please log in to transfer money.\r\n                     </Alert>\r\n                 </Paper>\r\n             </Container>\r\n        );\r\n     }\r\n\r\n\r\n    return (\r\n        <Container maxWidth=\"sm\" sx={{ mt: 4 }}>\r\n            <Paper elevation={3} sx={{ p: 3 }}>\r\n                <Typography variant=\"h4\" component=\"h1\" gutterBottom textAlign=\"center\">\r\n                    Transfer Money\r\n                </Typography>\r\n\r\n                <Box sx={{ my: 2, textAlign: 'center' }}>\r\n                    <Typography variant=\"h6\">Your Account</Typography>\r\n                     {isFetchingBalance ? (\r\n                         <CircularProgress size={20} />\r\n                     ) : senderDetails.balance !== null ? (\r\n                         <Typography variant=\"h5\" color=\"primary\" sx={{ fontWeight: 'bold' }}>\r\n                            Balance: ₹{senderDetails.balance.toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}\r\n                         </Typography>\r\n                     ) : (\r\n                         <Typography variant=\"body2\" color=\"text.secondary\">Could not load balance.</Typography>\r\n                     )}\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">ID: {senderDetails.customerId}</Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">Mobile: {senderDetails.mobileNumber}</Typography>\r\n                </Box>\r\n\r\n                <Box component=\"form\" onSubmit={handleTransfer} sx={{ mt: 2 }}>\r\n\r\n                    <Typography variant=\"h6\" gutterBottom sx={{ mt: 2 }}>\r\n                        Transfer Details\r\n                    </Typography>\r\n\r\n                     <TextField\r\n                         label=\"Your Password (Sender)\"\r\n                         type=\"password\"\r\n                         name=\"senderPassword\"\r\n                         value={formData.senderPassword}\r\n                         onChange={handleInputChange}\r\n                         fullWidth\r\n                         margin=\"normal\"\r\n                         required\r\n                     />\r\n\r\n                    {/* Amount */}\r\n                    <TextField\r\n                        label=\"Amount to Transfer\"\r\n                        type=\"number\"\r\n                        name=\"amount\"\r\n                        value={formData.amount}\r\n                        onChange={handleInputChange}\r\n                        fullWidth\r\n                        margin=\"normal\"\r\n                        required\r\n                        inputProps={{ min: \"0.01\", step: \"0.01\" }} // Ensure positive amount\r\n                        helperText={senderDetails.balance !== null ? `Current Balance: ₹${senderDetails.balance.toFixed(2)}` : ''}\r\n                        error={senderDetails.balance !== null && parseFloat(formData.amount) > senderDetails.balance} // Indicate insufficient funds\r\n                    />\r\n\r\n\r\n                    <Typography variant=\"h6\" gutterBottom sx={{ mt: 3 }}>\r\n                        Receiver Details\r\n                    </Typography>\r\n\r\n                    <TextField\r\n                        label=\"Receiver Customer ID\"\r\n                        name=\"receiverCustomerId\"\r\n                        value={formData.receiverCustomerId}\r\n                        onChange={handleInputChange}\r\n                        fullWidth\r\n                        margin=\"normal\"\r\n                        required\r\n                    />\r\n                    <TextField\r\n                        label=\"Receiver Mobile Number\"\r\n                        name=\"receiverMobileNo\"\r\n                        value={formData.receiverMobileNo}\r\n                        onChange={handleInputChange}\r\n                        fullWidth\r\n                        margin=\"normal\"\r\n                        required\r\n                    />\r\n\r\n                    {/* Messages */}\r\n                    {message && (\r\n                        <Alert severity={messageSeverity} sx={{ mt: 2 }}>\r\n                            {message}\r\n                        </Alert>\r\n                    )}\r\n\r\n                    {/* Submit Button */}\r\n                    <Button\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        fullWidth\r\n                        size=\"large\"\r\n                        sx={{ mt: 3 }}\r\n                        disabled={isLoading || !authState.isLoggedIn || isFetchingBalance || (senderDetails.balance !== null && parseFloat(formData.amount) > senderDetails.balance) || parseFloat(formData.amount) <= 0 || !formData.receiverCustomerId || !formData.receiverMobileNo || !formData.senderPassword} // Disable if loading, not logged in, balance fetching, insufficient funds, or fields missing\r\n                    >\r\n                        {isLoading ? 'Transferring...' : 'Transfer Money'}\r\n                    </Button>\r\n\r\n                     {/* Optional: Button to check balance after transfer */}\r\n                     {messageSeverity === 'success' && (\r\n                         <Button\r\n                             variant=\"outlined\"\r\n                             color=\"primary\"\r\n                             fullWidth\r\n                             size=\"large\"\r\n                             sx={{ mt: 2 }}\r\n                             onClick={() => navigate('/check-balance')}\r\n                         >\r\n                             Check Updated Balance\r\n                         </Button>\r\n                     )}\r\n\r\n                </Box>\r\n            </Paper>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default SimplifiedTransferPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}