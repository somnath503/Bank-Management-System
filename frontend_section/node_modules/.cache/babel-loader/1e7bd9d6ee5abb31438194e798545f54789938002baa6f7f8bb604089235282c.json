{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\somna\\\\Documents\\\\Java_Backend\\\\Banking\\\\frontend_section\\\\src\\\\component\\\\Page\\\\TransactionHistoryPage.js\",\n  _s = $RefreshSig$();\n// --- src/component/Page/TransactionHistoryPage.js ---\nimport React, { useState } from 'react';\nimport { Container, Paper, Typography, Box, TextField, Button, Alert, CircularProgress } from '@mui/material';\nimport { useAuth } from '../../context/AuthContext'; // Verify this path is correct\nimport axios from 'axios';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport { useNavigate } from 'react-router-dom';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack'; // Added for back button\n\n// Ensure your backend API base URL is correct\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:8080';\n\n// Renamed component to clearly indicate it's for the CUSTOMER\nexport default function CustomerTransactionHistoryPage() {\n  _s();\n  const {\n    authState\n  } = useAuth(); // Get authentication state\n  const navigate = useNavigate();\n\n  // State for date inputs and component feedback\n  // No targetCustomerId state needed here\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [error, setError] = useState(''); // Holds error messages for display\n  const [loading, setLoading] = useState(false); // Tracks loading state for API call\n  const [successMessage, setSuccessMessage] = useState(''); // Holds success messages\n\n  /**\r\n   * Helper function to parse user-friendly error messages from Axios errors.\r\n   * (Same helper function as in the Employee version)\r\n   * @param {Error} err - The error object caught (typically an Axios error).\r\n   * @returns {string} A user-friendly error message string.\r\n   */\n  const getErrorMessage = err => {\n    let message = 'An unexpected error occurred. Please try again.'; // Default message\n    if (err.response) {\n      console.error(\"API Error Response:\", err.response);\n      const status = err.response.status;\n      const responseData = err.response.data;\n      if (status === 403) {\n        // This shouldn't happen if logged in as approved customer, but handle just in case\n        message = 'Forbidden: You do not have permission to download history.';\n      } else if (status === 401) {\n        message = 'Unauthorized: Please log in again.';\n      } else if (status === 400) {\n        message = (responseData === null || responseData === void 0 ? void 0 : responseData.message) || 'Bad Request: Please check the dates.';\n      } else if (responseData !== null && responseData !== void 0 && responseData.message) {\n        message = responseData.message;\n      } else if (typeof responseData === 'string' && responseData.length > 0 && responseData.length < 200) {\n        message = responseData;\n      } else if (err.response.statusText) {\n        message = `Error: ${status} ${err.response.statusText}`;\n      }\n    } else if (err.request) {\n      console.error(\"API No Response Error:\", err.request);\n      message = 'Network Error: Could not connect to the server.';\n    } else {\n      console.error('API Request Setup Error:', err.message);\n      message = `Error: ${err.message}`;\n    }\n    return message;\n  };\n\n  /**\r\n   * Handles the form submission to download the customer's OWN history PDF.\r\n   */\n  const handleDownload = async () => {\n    // Clear previous messages\n    setError('');\n    setSuccessMessage('');\n\n    // --- 1. Frontend Input Validation ---\n    let validationError = '';\n    if (!startDate) {\n      // No targetCustomerId to check here\n      validationError = 'Please select a Start Date.';\n    } else if (!endDate) {\n      validationError = 'Please select an End Date.';\n    } else {\n      const start = new Date(startDate);\n      const end = new Date(endDate);\n      end.setHours(23, 59, 59, 999); // Make end date inclusive\n      if (start > end) {\n        validationError = 'Start date cannot be after end date.';\n      }\n    }\n    if (validationError) {\n      setError(validationError);\n      return; // Stop if validation fails\n    }\n\n    // --- 2. Start Loading and Prepare API Call ---\n    setLoading(true);\n\n    // Construct URL for the CUSTOMER download endpoint\n    // *** CRITICAL: NO targetCustomerId parameter is sent ***\n    const downloadUrl = `${API_BASE_URL}/transactions/download?startDate=${startDate}&endDate=${endDate}`;\n    console.log(\"Requesting download from (Customer Endpoint):\", downloadUrl);\n\n    // --- 3. Make API Request ---\n    try {\n      var _response$data;\n      const response = await axios.get(downloadUrl, {\n        responseType: 'blob',\n        // Expect binary data (the PDF)\n        withCredentials: true // Send necessary authentication (cookies/headers)\n      });\n\n      // --- 4. Process Successful Response (PDF received) ---\n      if (response.status === 200 && ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.type) === 'application/pdf') {\n        const blob = new Blob([response.data], {\n          type: 'application/pdf'\n        });\n        const url = window.URL.createObjectURL(blob);\n        const link = document.createElement('a');\n        link.href = url;\n        const contentDisposition = response.headers['content-disposition'];\n        // Use logged-in customer ID for default filename if needed, otherwise use header\n        let filename = `transaction_history_${authState.customerId}_${startDate}_to_${endDate}.pdf`; // Default using logged-in ID\n        if (contentDisposition) {\n          const filenameMatch = contentDisposition.match(/filename=\"?([^\"]+)\"?/i);\n          if (filenameMatch && filenameMatch.length > 1) {\n            filename = filenameMatch[1];\n          }\n        }\n        link.setAttribute('download', filename);\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        window.URL.revokeObjectURL(url);\n        console.log(`Own transaction history download initiated.`);\n        setSuccessMessage(`Your download started successfully!`);\n      } else {\n        // Handle unexpected success response\n        console.error(\"Received unexpected successful response:\", response);\n        const reader = new FileReader();\n        reader.onload = e => {\n          try {\n            const errorJson = JSON.parse(e.target.result);\n            setError(errorJson.message || \"Download failed: Server returned unexpected data.\");\n          } catch (parseError) {\n            setError(`Download failed: ${e.target.result || 'Server returned non-PDF data.'}`);\n          }\n        };\n        reader.onerror = () => setError(\"Download failed: Could not read response data.\");\n        reader.readAsText(response.data);\n      }\n\n      // --- 5. Handle API Call Errors ---\n    } catch (err) {\n      console.error(`Error downloading own history:`, err);\n      setError(getErrorMessage(err)); // Use helper\n    } finally {\n      // --- 6. Stop Loading ---\n      setLoading(false);\n    }\n  };\n\n  // --- 7. JSX Rendering ---\n  // Check if user is logged in\n  if (!authState.isLoggedIn) {\n    // Optionally navigate to login or show message\n    // navigate('/login'); // Or\n    return /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"sm\",\n      sx: {\n        mt: 4\n      },\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 3,\n        sx: {\n          p: 4,\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"warning\",\n          children: \"Please log in to view or download your transaction history.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          sx: {\n            mt: 2\n          },\n          onClick: () => navigate('/login'),\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 18\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 14\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"sm\",\n    sx: {\n      mt: 4,\n      mb: 4\n    },\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 3,\n      sx: {\n        p: {\n          xs: 2,\n          sm: 3,\n          md: 4\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          mb: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          component: \"h1\",\n          gutterBottom: true,\n          children: \"Download Your History\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          size: \"small\",\n          startIcon: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 36\n          }, this),\n          onClick: () => navigate('/header') // Navigate to customer dashboard/header\n          ,\n          children: \"My Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"text.secondary\",\n        sx: {\n          mb: 3\n        },\n        children: \"Select a date range to download your transaction history as a PDF.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        component: \"form\",\n        onSubmit: e => {\n          e.preventDefault();\n          handleDownload();\n        },\n        noValidate: true,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Start Date\",\n          id: \"startDate\",\n          type: \"date\",\n          value: startDate,\n          onChange: e => {\n            setStartDate(e.target.value);\n            setError('');\n            setSuccessMessage('');\n          },\n          InputLabelProps: {\n            shrink: true\n          },\n          fullWidth: true,\n          required: true,\n          margin: \"normal\",\n          disabled: loading,\n          autoFocus: true // Focus start date first\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"End Date\",\n          id: \"endDate\",\n          type: \"date\",\n          value: endDate,\n          onChange: e => {\n            setEndDate(e.target.value);\n            setError('');\n            setSuccessMessage('');\n          },\n          InputLabelProps: {\n            shrink: true\n          },\n          fullWidth: true,\n          required: true,\n          margin: \"normal\",\n          disabled: loading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 21\n        }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"error\",\n          sx: {\n            width: '100%',\n            mt: 2,\n            mb: 1\n          },\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 25\n        }, this), successMessage && /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"success\",\n          sx: {\n            width: '100%',\n            mt: 2,\n            mb: 1\n          },\n          children: successMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"contained\",\n          color: \"primary\"\n          // Disable button if loading or dates are empty\n          ,\n          disabled: loading || !startDate || !endDate,\n          fullWidth: true,\n          size: \"large\",\n          sx: {\n            mt: 2\n          },\n          startIcon: loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 20,\n            color: \"inherit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 46\n          }, this) : /*#__PURE__*/_jsxDEV(DownloadIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 95\n          }, this),\n          children: loading ? 'Generating...' : 'Download PDF'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 9\n  }, this);\n}\n\n// Ensure you replace the existing TransactionHistoryPage component export/usage in App.js\n// If you named this file TransactionHistoryPage.js initially, just update its content.\n// If you created a new file, update the import and Route path in App.js for the customer section.\n// Example update in App.js:\n// import CustomerTransactionHistoryPage from './component/Page/CustomerTransactionHistoryPage'; // Or TransactionHistoryPage if renamed\n// ...\n// <Route path=\"/history\" element={<CustomerTransactionHistoryPage />} /> // Ensure element matches component name\n_s(CustomerTransactionHistoryPage, \"mwuAWawdVnNxM78vurcqkN7onGU=\", false, function () {\n  return [useAuth, useNavigate];\n});\n_c = CustomerTransactionHistoryPage;\nvar _c;\n$RefreshReg$(_c, \"CustomerTransactionHistoryPage\");","map":{"version":3,"names":["React","useState","Container","Paper","Typography","Box","TextField","Button","Alert","CircularProgress","useAuth","axios","DownloadIcon","useNavigate","ArrowBackIcon","jsxDEV","_jsxDEV","API_BASE_URL","CustomerTransactionHistoryPage","_s","authState","navigate","startDate","setStartDate","endDate","setEndDate","error","setError","loading","setLoading","successMessage","setSuccessMessage","getErrorMessage","err","message","response","console","status","responseData","data","length","statusText","request","handleDownload","validationError","start","Date","end","setHours","downloadUrl","log","_response$data","get","responseType","withCredentials","type","blob","Blob","url","window","URL","createObjectURL","link","document","createElement","href","contentDisposition","headers","filename","customerId","filenameMatch","match","setAttribute","body","appendChild","click","removeChild","revokeObjectURL","reader","FileReader","onload","e","errorJson","JSON","parse","target","result","parseError","onerror","readAsText","isLoggedIn","maxWidth","sx","mt","children","elevation","p","textAlign","severity","fileName","_jsxFileName","lineNumber","columnNumber","variant","onClick","mb","xs","sm","md","display","justifyContent","alignItems","component","gutterBottom","size","startIcon","color","onSubmit","preventDefault","noValidate","label","id","value","onChange","InputLabelProps","shrink","fullWidth","required","margin","disabled","autoFocus","width","_c","$RefreshReg$"],"sources":["C:/Users/somna/Documents/Java_Backend/Banking/frontend_section/src/component/Page/TransactionHistoryPage.js"],"sourcesContent":["// --- src/component/Page/TransactionHistoryPage.js ---\r\nimport React, { useState } from 'react';\r\nimport { Container, Paper, Typography, Box, TextField, Button, Alert, CircularProgress } from '@mui/material';\r\nimport { useAuth } from '../../context/AuthContext'; // Verify this path is correct\r\nimport axios from 'axios';\r\nimport DownloadIcon from '@mui/icons-material/Download';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack'; // Added for back button\r\n\r\n// Ensure your backend API base URL is correct\r\nconst API_BASE_URL = 'http://localhost:8080';\r\n\r\n// Renamed component to clearly indicate it's for the CUSTOMER\r\nexport default function CustomerTransactionHistoryPage() {\r\n    const { authState } = useAuth(); // Get authentication state\r\n    const navigate = useNavigate();\r\n\r\n    // State for date inputs and component feedback\r\n    // No targetCustomerId state needed here\r\n    const [startDate, setStartDate] = useState('');\r\n    const [endDate, setEndDate] = useState('');\r\n    const [error, setError] = useState(''); // Holds error messages for display\r\n    const [loading, setLoading] = useState(false); // Tracks loading state for API call\r\n    const [successMessage, setSuccessMessage] = useState(''); // Holds success messages\r\n\r\n    /**\r\n     * Helper function to parse user-friendly error messages from Axios errors.\r\n     * (Same helper function as in the Employee version)\r\n     * @param {Error} err - The error object caught (typically an Axios error).\r\n     * @returns {string} A user-friendly error message string.\r\n     */\r\n    const getErrorMessage = (err) => {\r\n        let message = 'An unexpected error occurred. Please try again.'; // Default message\r\n        if (err.response) {\r\n            console.error(\"API Error Response:\", err.response);\r\n            const status = err.response.status;\r\n            const responseData = err.response.data;\r\n\r\n            if (status === 403) {\r\n                // This shouldn't happen if logged in as approved customer, but handle just in case\r\n                message = 'Forbidden: You do not have permission to download history.';\r\n            } else if (status === 401) {\r\n                 message = 'Unauthorized: Please log in again.';\r\n            } else if (status === 400) {\r\n                 message = responseData?.message || 'Bad Request: Please check the dates.';\r\n            } else if (responseData?.message) {\r\n                message = responseData.message;\r\n            } else if (typeof responseData === 'string' && responseData.length > 0 && responseData.length < 200) {\r\n                message = responseData;\r\n            } else if (err.response.statusText) {\r\n                 message = `Error: ${status} ${err.response.statusText}`;\r\n            }\r\n        } else if (err.request) {\r\n            console.error(\"API No Response Error:\", err.request);\r\n            message = 'Network Error: Could not connect to the server.';\r\n        } else {\r\n            console.error('API Request Setup Error:', err.message);\r\n            message = `Error: ${err.message}`;\r\n        }\r\n        return message;\r\n    };\r\n\r\n    /**\r\n     * Handles the form submission to download the customer's OWN history PDF.\r\n     */\r\n    const handleDownload = async () => {\r\n        // Clear previous messages\r\n        setError('');\r\n        setSuccessMessage('');\r\n\r\n        // --- 1. Frontend Input Validation ---\r\n        let validationError = '';\r\n         if (!startDate) { // No targetCustomerId to check here\r\n            validationError = 'Please select a Start Date.';\r\n        } else if (!endDate) {\r\n            validationError = 'Please select an End Date.';\r\n        } else {\r\n            const start = new Date(startDate);\r\n            const end = new Date(endDate);\r\n            end.setHours(23, 59, 59, 999); // Make end date inclusive\r\n            if (start > end) {\r\n                validationError = 'Start date cannot be after end date.';\r\n            }\r\n        }\r\n\r\n        if (validationError) {\r\n            setError(validationError);\r\n            return; // Stop if validation fails\r\n        }\r\n\r\n        // --- 2. Start Loading and Prepare API Call ---\r\n        setLoading(true);\r\n\r\n        // Construct URL for the CUSTOMER download endpoint\r\n        // *** CRITICAL: NO targetCustomerId parameter is sent ***\r\n        const downloadUrl = `${API_BASE_URL}/transactions/download?startDate=${startDate}&endDate=${endDate}`;\r\n        console.log(\"Requesting download from (Customer Endpoint):\", downloadUrl);\r\n\r\n        // --- 3. Make API Request ---\r\n        try {\r\n            const response = await axios.get(downloadUrl, {\r\n                responseType: 'blob', // Expect binary data (the PDF)\r\n                withCredentials: true // Send necessary authentication (cookies/headers)\r\n            });\r\n\r\n            // --- 4. Process Successful Response (PDF received) ---\r\n            if (response.status === 200 && response.data?.type === 'application/pdf') {\r\n                const blob = new Blob([response.data], { type: 'application/pdf' });\r\n                const url = window.URL.createObjectURL(blob);\r\n                const link = document.createElement('a');\r\n                link.href = url;\r\n\r\n                const contentDisposition = response.headers['content-disposition'];\r\n                // Use logged-in customer ID for default filename if needed, otherwise use header\r\n                let filename = `transaction_history_${authState.customerId}_${startDate}_to_${endDate}.pdf`; // Default using logged-in ID\r\n                if (contentDisposition) {\r\n                    const filenameMatch = contentDisposition.match(/filename=\"?([^\"]+)\"?/i);\r\n                    if (filenameMatch && filenameMatch.length > 1) {\r\n                        filename = filenameMatch[1];\r\n                    }\r\n                }\r\n\r\n                link.setAttribute('download', filename);\r\n                document.body.appendChild(link);\r\n                link.click();\r\n                document.body.removeChild(link);\r\n                window.URL.revokeObjectURL(url);\r\n\r\n                console.log(`Own transaction history download initiated.`);\r\n                setSuccessMessage(`Your download started successfully!`);\r\n\r\n            } else {\r\n                // Handle unexpected success response\r\n                console.error(\"Received unexpected successful response:\", response);\r\n                const reader = new FileReader();\r\n                reader.onload = (e) => {\r\n                    try {\r\n                        const errorJson = JSON.parse(e.target.result);\r\n                        setError(errorJson.message || \"Download failed: Server returned unexpected data.\");\r\n                    } catch (parseError) {\r\n                        setError(`Download failed: ${e.target.result || 'Server returned non-PDF data.'}`);\r\n                    }\r\n                }\r\n                reader.onerror = () => setError(\"Download failed: Could not read response data.\");\r\n                reader.readAsText(response.data);\r\n            }\r\n\r\n        // --- 5. Handle API Call Errors ---\r\n        } catch (err) {\r\n            console.error(`Error downloading own history:`, err);\r\n            setError(getErrorMessage(err)); // Use helper\r\n        } finally {\r\n            // --- 6. Stop Loading ---\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // --- 7. JSX Rendering ---\r\n    // Check if user is logged in\r\n    if (!authState.isLoggedIn) {\r\n         // Optionally navigate to login or show message\r\n         // navigate('/login'); // Or\r\n         return (\r\n             <Container maxWidth=\"sm\" sx={{ mt: 4 }}>\r\n                 <Paper elevation={3} sx={{ p: 4, textAlign: 'center' }}>\r\n                    <Alert severity=\"warning\">Please log in to view or download your transaction history.</Alert>\r\n                    <Button variant=\"contained\" sx={{mt: 2}} onClick={() => navigate('/login')}>Login</Button>\r\n                 </Paper>\r\n             </Container>\r\n         );\r\n    }\r\n\r\n    return (\r\n        <Container maxWidth=\"sm\" sx={{ mt: 4, mb: 4 }}>\r\n            <Paper elevation={3} sx={{ p: { xs: 2, sm: 3, md: 4 } }}>\r\n                 <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n                    <Typography variant=\"h5\" component=\"h1\" gutterBottom>\r\n                        Download Your History\r\n                    </Typography>\r\n                    {/* Back button might navigate to customer dashboard */}\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        startIcon={<ArrowBackIcon />}\r\n                        onClick={() => navigate('/header')} // Navigate to customer dashboard/header\r\n                    >\r\n                        My Account\r\n                    </Button>\r\n                 </Box>\r\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n                    Select a date range to download your transaction history as a PDF.\r\n                </Typography>\r\n\r\n                 <Box component=\"form\" onSubmit={(e) => { e.preventDefault(); handleDownload(); }} noValidate>\r\n                    {/* Input Fields - NO targetCustomerId input here */}\r\n                     <TextField\r\n                        label=\"Start Date\"\r\n                        id=\"startDate\"\r\n                        type=\"date\"\r\n                        value={startDate}\r\n                        onChange={(e) => { setStartDate(e.target.value); setError(''); setSuccessMessage(''); }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        fullWidth\r\n                        required\r\n                        margin=\"normal\"\r\n                        disabled={loading}\r\n                        autoFocus // Focus start date first\r\n                    />\r\n                    <TextField\r\n                        label=\"End Date\"\r\n                        id=\"endDate\"\r\n                        type=\"date\"\r\n                        value={endDate}\r\n                        onChange={(e) => { setEndDate(e.target.value); setError(''); setSuccessMessage(''); }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        fullWidth\r\n                        required\r\n                        margin=\"normal\"\r\n                        disabled={loading}\r\n                    />\r\n\r\n                    {/* Display Error Message */}\r\n                    {error && (\r\n                        <Alert severity=\"error\" sx={{ width: '100%', mt: 2, mb: 1 }}>\r\n                            {error}\r\n                        </Alert>\r\n                    )}\r\n                    {/* Display Success Message */}\r\n                    {successMessage && (\r\n                        <Alert severity=\"success\" sx={{ width: '100%', mt: 2, mb: 1 }}>\r\n                            {successMessage}\r\n                        </Alert>\r\n                    )}\r\n\r\n                    {/* Submit Button */}\r\n                    <Button\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        // Disable button if loading or dates are empty\r\n                        disabled={loading || !startDate || !endDate}\r\n                        fullWidth\r\n                        size=\"large\"\r\n                        sx={{ mt: 2 }}\r\n                        startIcon={loading ? <CircularProgress size={20} color=\"inherit\" /> : <DownloadIcon />}\r\n                    >\r\n                        {loading ? 'Generating...' : 'Download PDF'}\r\n                    </Button>\r\n                 </Box>\r\n            </Paper>\r\n        </Container>\r\n    );\r\n}\r\n\r\n// Ensure you replace the existing TransactionHistoryPage component export/usage in App.js\r\n// If you named this file TransactionHistoryPage.js initially, just update its content.\r\n// If you created a new file, update the import and Route path in App.js for the customer section.\r\n// Example update in App.js:\r\n// import CustomerTransactionHistoryPage from './component/Page/CustomerTransactionHistoryPage'; // Or TransactionHistoryPage if renamed\r\n// ...\r\n// <Route path=\"/history\" element={<CustomerTransactionHistoryPage />} /> // Ensure element matches component name"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}