{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\somna\\\\Documents\\\\Java_Backend\\\\Banking\\\\frontend_section\\\\src\\\\component\\\\Page\\\\CheckBalance.js\",\n  _s = $RefreshSig$();\n// --- src/component/Page/CheckBalance.js ---\nimport React, { useState } from 'react';\nimport axios from 'axios';\n// Import MUI components for better UI\nimport { Container, Paper, Typography, Button, Box, CircularProgress, Alert } from '@mui/material';\n// Remove old CSS import if using MUI primarily\n// import '../cssfiles/CheckBalance.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:8080';\nconst CheckBalancePage = () => {\n  _s();\n  // Renamed component for clarity\n  // Remove state for mobileNo and password\n  const [balance, setBalance] = useState(null); // Store balance (null initially)\n  const [message, setMessage] = useState(''); // For error/success messages\n  const [isLoading, setIsLoading] = useState(false);\n  const handleCheckBalance = async () => {\n    // No event needed if just a button click\n    setIsLoading(true);\n    setBalance(null); // Clear previous balance\n    setMessage(''); // Clear previous message\n\n    // No request data needed in the body anymore\n    // const checkBalanceData = {}; // Empty object or null\n\n    try {\n      // Make the POST request (or change to GET if backend endpoint changes)\n      // Include credentials (cookies/headers) automatically via `withCredentials` or interceptor\n      const response = await axios.post(`${API_BASE_URL}/checkBalance`, null, {\n        // Send null or empty body\n        withCredentials: true\n      });\n      // Assuming backend now returns a specific message like \"Current Balance: ₹123.45\"\n      setBalance(response.data); // Store the full message or parse it if needed\n      setMessage(''); // Clear error message on success\n    } catch (error) {\n      var _error$response;\n      console.error('Error checking balance:', error);\n      setBalance(null); // Clear balance on error\n      // Display error from backend or a generic one\n      setMessage(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || 'Error occurred while checking balance. Please ensure you are logged in.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"sm\",\n    sx: {\n      mt: 4\n    },\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 3,\n      sx: {\n        p: 3,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        component: \"h1\",\n        gutterBottom: true,\n        children: \"Check Balance\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          my: 3,\n          minHeight: '40px',\n          textAlign: 'center'\n        },\n        children: isLoading ? /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }, this) : balance !== null ? /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          color: \"primary\",\n          children: [balance, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 25\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), message && !isLoading && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        sx: {\n          width: '100%',\n          mb: 2\n        },\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleCheckBalance,\n        disabled: isLoading,\n        fullWidth: true,\n        children: isLoading ? 'Checking...' : 'Check My Balance'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n_s(CheckBalancePage, \"j1P7RWDvb472hYzKmrIePJMpWI8=\");\n_c = CheckBalancePage;\nexport default CheckBalancePage; // Export with new name\nvar _c;\n$RefreshReg$(_c, \"CheckBalancePage\");","map":{"version":3,"names":["React","useState","axios","Container","Paper","Typography","Button","Box","CircularProgress","Alert","jsxDEV","_jsxDEV","API_BASE_URL","CheckBalancePage","_s","balance","setBalance","message","setMessage","isLoading","setIsLoading","handleCheckBalance","response","post","withCredentials","data","error","_error$response","console","maxWidth","sx","mt","children","elevation","p","display","flexDirection","alignItems","variant","component","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","my","minHeight","textAlign","color","severity","width","mb","onClick","disabled","fullWidth","_c","$RefreshReg$"],"sources":["C:/Users/somna/Documents/Java_Backend/Banking/frontend_section/src/component/Page/CheckBalance.js"],"sourcesContent":["// --- src/component/Page/CheckBalance.js ---\r\nimport React, { useState } from 'react';\r\nimport axios from 'axios';\r\n// Import MUI components for better UI\r\nimport { Container, Paper, Typography, Button, Box, CircularProgress, Alert } from '@mui/material';\r\n// Remove old CSS import if using MUI primarily\r\n// import '../cssfiles/CheckBalance.css';\r\n\r\nconst API_BASE_URL = 'http://localhost:8080';\r\n\r\nconst CheckBalancePage = () => { // Renamed component for clarity\r\n    // Remove state for mobileNo and password\r\n    const [balance, setBalance] = useState(null); // Store balance (null initially)\r\n    const [message, setMessage] = useState(''); // For error/success messages\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const handleCheckBalance = async () => { // No event needed if just a button click\r\n        setIsLoading(true);\r\n        setBalance(null); // Clear previous balance\r\n        setMessage('');   // Clear previous message\r\n\r\n        // No request data needed in the body anymore\r\n        // const checkBalanceData = {}; // Empty object or null\r\n\r\n        try {\r\n            // Make the POST request (or change to GET if backend endpoint changes)\r\n            // Include credentials (cookies/headers) automatically via `withCredentials` or interceptor\r\n            const response = await axios.post(`${API_BASE_URL}/checkBalance`, null, { // Send null or empty body\r\n                withCredentials: true\r\n            });\r\n            // Assuming backend now returns a specific message like \"Current Balance: ₹123.45\"\r\n            setBalance(response.data); // Store the full message or parse it if needed\r\n            setMessage(''); // Clear error message on success\r\n        } catch (error) {\r\n            console.error('Error checking balance:', error);\r\n            setBalance(null); // Clear balance on error\r\n            // Display error from backend or a generic one\r\n            setMessage(error.response?.data || 'Error occurred while checking balance. Please ensure you are logged in.');\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container maxWidth=\"sm\" sx={{ mt: 4 }}>\r\n            <Paper elevation={3} sx={{ p: 3, display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n                <Typography variant=\"h4\" component=\"h1\" gutterBottom>\r\n                    Check Balance\r\n                </Typography>\r\n\r\n                {/* Display Balance or Loading */}\r\n                <Box sx={{ my: 3, minHeight: '40px', textAlign: 'center' }}>\r\n                    {isLoading ? (\r\n                        <CircularProgress />\r\n                    ) : balance !== null ? (\r\n                        <Typography variant=\"h5\" color=\"primary\">\r\n                           {balance} {/* Display the message from backend */}\r\n                        </Typography>\r\n                    ) : null}\r\n                </Box>\r\n\r\n                {/* Display Error Message */}\r\n                {message && !isLoading && (\r\n                    <Alert severity=\"error\" sx={{ width: '100%', mb: 2 }}>\r\n                        {message}\r\n                    </Alert>\r\n                )}\r\n\r\n                {/* Button to trigger the check */}\r\n                <Button\r\n                    variant=\"contained\"\r\n                    onClick={handleCheckBalance}\r\n                    disabled={isLoading}\r\n                    fullWidth\r\n                >\r\n                    {isLoading ? 'Checking...' : 'Check My Balance'}\r\n                </Button>\r\n            </Paper>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default CheckBalancePage; // Export with new name"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}