{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\somna\\\\Documents\\\\Java_Backend\\\\Banking\\\\frontend_section\\\\src\\\\component\\\\Page\\\\Admin\\\\PendingApprovaslPage.js\",\n  _s = $RefreshSig$();\n// --- src/pages/Admin/PendingApprovalsPage.js ---\nimport React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport { useAuth } from '../../../context/AuthContext'; // To potentially get token/credentials later\n\n// Import MUI components\nimport { Container, Typography, Paper, TableContainer, Table, TableHead, TableRow, TableCell, TableBody, Button, CircularProgress, Alert, Snackbar, Box } from '@mui/material';\n\n// Base URL for your backend\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:8080';\nexport default function PendingApprovalsPage() {\n  _s();\n  const [pendingUsers, setPendingUsers] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(''); // Should always be a string or null/empty\n  const [successMessage, setSuccessMessage] = useState(''); // Should always be a string or null/empty\n  const {\n    authState\n  } = useAuth(); // Get auth state if needed for token\n\n  // Helper function to extract error message string\n  const getErrorMessage = err => {\n    var _err$response, _err$response$data, _err$response2;\n    let message = 'An unexpected error occurred.'; // Default\n    if ((_err$response = err.response) !== null && _err$response !== void 0 && (_err$response$data = _err$response.data) !== null && _err$response$data !== void 0 && _err$response$data.message && typeof err.response.data.message === 'string') {\n      // Use the message from the Spring Boot error object if available\n      message = err.response.data.message;\n    } else if ((_err$response2 = err.response) !== null && _err$response2 !== void 0 && _err$response2.data && typeof err.response.data === 'string') {\n      // If the response data itself is just a string\n      message = err.response.data;\n    } else if (err.message) {\n      // Fallback to the generic JS error message\n      message = err.message;\n    }\n    return message;\n  };\n\n  // Function to fetch pending users\n  const fetchPendingUsers = useCallback(async () => {\n    setIsLoading(true);\n    setError('');\n    try {\n      const response = await axios.get(`${API_BASE_URL}/admin/pending`, {\n        withCredentials: true // Send cookies/auth headers if CORS allows\n      });\n      // Ensure response.data is always an array before setting state\n      if (Array.isArray(response.data)) {\n        setPendingUsers(response.data);\n      } else {\n        console.warn(\"Received non-array data for pending users:\", response.data);\n        setPendingUsers([]); // Default to empty array if unexpected data\n        setError(\"Received unexpected data format from server.\");\n      }\n    } catch (err) {\n      console.error(\"Error fetching pending users:\", err);\n      // *** FIX: Extract string message before setting error state ***\n      setError(getErrorMessage(err) || 'Failed to fetch pending users. Ensure you are logged in as Admin.');\n      setPendingUsers([]); // Clear users on error\n    } finally {\n      setIsLoading(false);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // Removed authState dependency unless token needs refreshing logic\n\n  // Fetch users when component mounts\n  useEffect(() => {\n    fetchPendingUsers();\n  }, [fetchPendingUsers]);\n\n  // Handler for Approving a user\n  const handleApprove = async customerId => {\n    setError('');\n    setSuccessMessage('');\n    // Optional: Add loading state specific to this button if needed\n    try {\n      const response = await axios.post(`${API_BASE_URL}/admin/approve/${customerId}`, null, {\n        // No request body needed\n        withCredentials: true // Try sending credentials\n      });\n      // Assuming backend sends a simple string on success\n      setSuccessMessage(response.data || `User ${customerId} approved successfully!`);\n      fetchPendingUsers(); // Refresh the list\n    } catch (err) {\n      console.error(`Error approving user ${customerId}:`, err);\n      // *** FIX: Extract string message before setting error state ***\n      setError(getErrorMessage(err) || `Failed to approve user ${customerId}.`);\n    }\n  };\n\n  // Handler for Rejecting a user\n  const handleReject = async customerId => {\n    if (!window.confirm(`Are you sure you want to reject and remove user ${customerId}?`)) {\n      return;\n    }\n    setError('');\n    setSuccessMessage('');\n    // Optional: Add loading state specific to this button if needed\n    try {\n      const response = await axios.post(`${API_BASE_URL}/admin/reject/${customerId}`, null, {\n        // No request body needed\n        withCredentials: true // Try sending credentials\n      });\n      // Assuming backend sends a simple string on success\n      setSuccessMessage(response.data || `User ${customerId} rejected successfully!`);\n      fetchPendingUsers(); // Refresh the list\n    } catch (err) {\n      console.error(`Error rejecting user ${customerId}:`, err);\n      // *** FIX: Extract string message before setting error state ***\n      setError(getErrorMessage(err) || `Failed to reject user ${customerId}.`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"lg\",\n    sx: {\n      mt: 4,\n      mb: 4\n    },\n    children: [/*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 3,\n      sx: {\n        p: {\n          xs: 2,\n          md: 3\n        },\n        mb: 2,\n        textAlign: 'center',\n        background: 'linear-gradient(45deg, #673ab7 30%, #3f51b5 90%)',\n        color: 'white'\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        component: \"h2\",\n        gutterBottom: true,\n        sx: {\n          fontWeight: 'bold'\n        },\n        children: \"Pending Customer Approvals\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 26\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 15\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'center',\n        my: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 2\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: !!successMessage,\n      autoHideDuration: 6000,\n      onClose: () => setSuccessMessage(''),\n      message: successMessage // Ensure successMessage is also a string\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 14\n    }, this), !isLoading && /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        width: '100%',\n        overflow: 'hidden'\n      },\n      children: /*#__PURE__*/_jsxDEV(TableContainer, {\n        sx: {\n          maxHeight: 600\n        },\n        children: [\" \", /*#__PURE__*/_jsxDEV(Table, {\n          stickyHeader: true,\n          \"aria-label\": \"pending users table\",\n          children: [/*#__PURE__*/_jsxDEV(TableHead, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                sx: {\n                  backgroundColor: 'primary.light',\n                  color: 'primary.contrastText',\n                  fontWeight: 'bold'\n                },\n                children: \"Customer ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                sx: {\n                  backgroundColor: 'primary.light',\n                  color: 'primary.contrastText',\n                  fontWeight: 'bold'\n                },\n                children: \"Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                sx: {\n                  backgroundColor: 'primary.light',\n                  color: 'primary.contrastText',\n                  fontWeight: 'bold'\n                },\n                children: \"Email\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                sx: {\n                  backgroundColor: 'primary.light',\n                  color: 'primary.contrastText',\n                  fontWeight: 'bold'\n                },\n                children: \"Mobile\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                sx: {\n                  backgroundColor: 'primary.light',\n                  color: 'primary.contrastText',\n                  fontWeight: 'bold'\n                },\n                children: \"Account No\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                sx: {\n                  backgroundColor: 'primary.light',\n                  color: 'primary.contrastText',\n                  fontWeight: 'bold',\n                  textAlign: 'center'\n                },\n                children: \"Actions\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: !error && pendingUsers.length === 0 ? /*#__PURE__*/_jsxDEV(TableRow, {\n              children: /*#__PURE__*/_jsxDEV(TableCell, {\n                colSpan: 6,\n                align: \"center\",\n                sx: {\n                  py: 3,\n                  fontStyle: 'italic',\n                  color: 'text.secondary'\n                },\n                children: \"No pending registrations found.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 42\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 38\n            }, this) :\n            // Map users only if pendingUsers is an array and has items\n            Array.isArray(pendingUsers) && pendingUsers.map(user => /*#__PURE__*/_jsxDEV(TableRow, {\n              hover: true,\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                children: user.customerId || 'N/A'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: `${user.fname || ''} ${user.lname || ''}`.trim() || 'N/A'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: user.email || 'N/A'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: user.mobileNumber || 'N/A'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: user.accountNumber || 'N/A'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"center\",\n                children: [\" \", /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  color: \"success\",\n                  size: \"small\",\n                  onClick: () => handleApprove(user.customerId),\n                  sx: {\n                    mr: 1,\n                    minWidth: '80px'\n                  } // Ensure buttons have min width\n                  ,\n                  children: \"Approve\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 180,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  color: \"error\",\n                  size: \"small\",\n                  onClick: () => handleReject(user.customerId),\n                  sx: {\n                    minWidth: '80px'\n                  } // Ensure buttons have min width\n                  ,\n                  children: \"Reject\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 189,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 45\n              }, this)]\n            }, user.customerId, true, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 9\n  }, this);\n}\n_s(PendingApprovalsPage, \"SFLEcrxHUlCX30I+chBkon6SJnc=\", false, function () {\n  return [useAuth];\n});\n_c = PendingApprovalsPage;\nvar _c;\n$RefreshReg$(_c, \"PendingApprovalsPage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","axios","useAuth","Container","Typography","Paper","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","Button","CircularProgress","Alert","Snackbar","Box","jsxDEV","_jsxDEV","API_BASE_URL","PendingApprovalsPage","_s","pendingUsers","setPendingUsers","isLoading","setIsLoading","error","setError","successMessage","setSuccessMessage","authState","getErrorMessage","err","_err$response","_err$response$data","_err$response2","message","response","data","fetchPendingUsers","get","withCredentials","Array","isArray","console","warn","handleApprove","customerId","post","handleReject","window","confirm","maxWidth","sx","mt","mb","children","elevation","p","xs","md","textAlign","background","color","variant","component","gutterBottom","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","display","justifyContent","my","severity","open","autoHideDuration","onClose","width","overflow","maxHeight","stickyHeader","backgroundColor","length","colSpan","align","py","fontStyle","map","user","hover","fname","lname","trim","email","mobileNumber","accountNumber","size","onClick","mr","minWidth","_c","$RefreshReg$"],"sources":["C:/Users/somna/Documents/Java_Backend/Banking/frontend_section/src/component/Page/Admin/PendingApprovaslPage.js"],"sourcesContent":["// --- src/pages/Admin/PendingApprovalsPage.js ---\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport { useAuth } from '../../../context/AuthContext'; // To potentially get token/credentials later\r\n\r\n// Import MUI components\r\nimport {\r\n    Container, Typography, Paper, TableContainer, Table, TableHead, TableRow, TableCell, TableBody, Button,\r\n    CircularProgress, Alert, Snackbar, Box\r\n} from '@mui/material';\r\n\r\n// Base URL for your backend\r\nconst API_BASE_URL = 'http://localhost:8080';\r\n\r\nexport default function PendingApprovalsPage() {\r\n    const [pendingUsers, setPendingUsers] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(''); // Should always be a string or null/empty\r\n    const [successMessage, setSuccessMessage] = useState(''); // Should always be a string or null/empty\r\n    const { authState } = useAuth(); // Get auth state if needed for token\r\n\r\n    // Helper function to extract error message string\r\n    const getErrorMessage = (err) => {\r\n        let message = 'An unexpected error occurred.'; // Default\r\n        if (err.response?.data?.message && typeof err.response.data.message === 'string') {\r\n            // Use the message from the Spring Boot error object if available\r\n            message = err.response.data.message;\r\n        } else if (err.response?.data && typeof err.response.data === 'string') {\r\n            // If the response data itself is just a string\r\n            message = err.response.data;\r\n        } else if (err.message) {\r\n            // Fallback to the generic JS error message\r\n            message = err.message;\r\n        }\r\n        return message;\r\n    };\r\n\r\n\r\n    // Function to fetch pending users\r\n    const fetchPendingUsers = useCallback(async () => {\r\n        setIsLoading(true);\r\n        setError('');\r\n        try {\r\n            const response = await axios.get(`${API_BASE_URL}/admin/pending`, {\r\n                 withCredentials: true // Send cookies/auth headers if CORS allows\r\n            });\r\n             // Ensure response.data is always an array before setting state\r\n             if (Array.isArray(response.data)) {\r\n                setPendingUsers(response.data);\r\n             } else {\r\n                console.warn(\"Received non-array data for pending users:\", response.data);\r\n                setPendingUsers([]); // Default to empty array if unexpected data\r\n                setError(\"Received unexpected data format from server.\");\r\n             }\r\n\r\n        } catch (err) {\r\n            console.error(\"Error fetching pending users:\", err);\r\n             // *** FIX: Extract string message before setting error state ***\r\n            setError(getErrorMessage(err) || 'Failed to fetch pending users. Ensure you are logged in as Admin.');\r\n            setPendingUsers([]); // Clear users on error\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []); // Removed authState dependency unless token needs refreshing logic\r\n\r\n\r\n    // Fetch users when component mounts\r\n    useEffect(() => {\r\n        fetchPendingUsers();\r\n    }, [fetchPendingUsers]);\r\n\r\n    // Handler for Approving a user\r\n    const handleApprove = async (customerId) => {\r\n        setError('');\r\n        setSuccessMessage('');\r\n         // Optional: Add loading state specific to this button if needed\r\n        try {\r\n            const response = await axios.post(`${API_BASE_URL}/admin/approve/${customerId}`, null, { // No request body needed\r\n                 withCredentials: true // Try sending credentials\r\n            });\r\n            // Assuming backend sends a simple string on success\r\n            setSuccessMessage(response.data || `User ${customerId} approved successfully!`);\r\n            fetchPendingUsers(); // Refresh the list\r\n        } catch (err) {\r\n            console.error(`Error approving user ${customerId}:`, err);\r\n             // *** FIX: Extract string message before setting error state ***\r\n            setError(getErrorMessage(err) || `Failed to approve user ${customerId}.`);\r\n        }\r\n    };\r\n\r\n    // Handler for Rejecting a user\r\n    const handleReject = async (customerId) => {\r\n        if (!window.confirm(`Are you sure you want to reject and remove user ${customerId}?`)) {\r\n            return;\r\n        }\r\n\r\n        setError('');\r\n        setSuccessMessage('');\r\n        // Optional: Add loading state specific to this button if needed\r\n        try {\r\n            const response = await axios.post(`${API_BASE_URL}/admin/reject/${customerId}`, null, { // No request body needed\r\n                 withCredentials: true // Try sending credentials\r\n            });\r\n             // Assuming backend sends a simple string on success\r\n            setSuccessMessage(response.data || `User ${customerId} rejected successfully!`);\r\n            fetchPendingUsers(); // Refresh the list\r\n        } catch (err) {\r\n            console.error(`Error rejecting user ${customerId}:`, err);\r\n             // *** FIX: Extract string message before setting error state ***\r\n            setError(getErrorMessage(err) || `Failed to reject user ${customerId}.`);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n              <Paper elevation={3} sx={{ p: { xs: 2, md: 3 }, mb: 2, textAlign: 'center', background: 'linear-gradient(45deg, #673ab7 30%, #3f51b5 90%)', color: 'white' }}>\r\n                         <Typography variant=\"h4\" component=\"h2\" gutterBottom sx={{ fontWeight: 'bold' }}>\r\n                         Pending Customer Approvals\r\n                        </Typography>\r\n\r\n                </Paper>\r\n\r\n            {/* Loading Indicator */}\r\n            {isLoading && (\r\n                <Box sx={{ display: 'flex', justifyContent: 'center', my: 3 }}>\r\n                    <CircularProgress />\r\n                </Box>\r\n            )}\r\n\r\n            {/* Error Alert - Renders the STRING from error state */}\r\n            {error && (\r\n                <Alert severity=\"error\" sx={{ mb: 2 }}>{error}</Alert>\r\n            )}\r\n\r\n            {/* Success Snackbar */}\r\n             <Snackbar\r\n                open={!!successMessage}\r\n                autoHideDuration={6000}\r\n                onClose={() => setSuccessMessage('')}\r\n                message={successMessage} // Ensure successMessage is also a string\r\n             />\r\n\r\n            {/* Table of Pending Users */}\r\n            {/* Render table only when not loading */}\r\n            {!isLoading && (\r\n                <Paper sx={{ width: '100%', overflow: 'hidden' }}>\r\n                    <TableContainer sx={{ maxHeight: 600 }}> {/* Optional: Limit height */}\r\n                        <Table stickyHeader aria-label=\"pending users table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                     {/* Added some styling for header */}\r\n                                    <TableCell sx={{ backgroundColor: 'primary.light', color: 'primary.contrastText', fontWeight: 'bold' }}>Customer ID</TableCell>\r\n                                    <TableCell sx={{ backgroundColor: 'primary.light', color: 'primary.contrastText', fontWeight: 'bold' }}>Name</TableCell>\r\n                                    <TableCell sx={{ backgroundColor: 'primary.light', color: 'primary.contrastText', fontWeight: 'bold' }}>Email</TableCell>\r\n                                    <TableCell sx={{ backgroundColor: 'primary.light', color: 'primary.contrastText', fontWeight: 'bold' }}>Mobile</TableCell>\r\n                                    <TableCell sx={{ backgroundColor: 'primary.light', color: 'primary.contrastText', fontWeight: 'bold' }}>Account No</TableCell>\r\n                                    <TableCell sx={{ backgroundColor: 'primary.light', color: 'primary.contrastText', fontWeight: 'bold', textAlign: 'center' }}>Actions</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {/* Show message if loading is finished and there are no users AND no error */}\r\n                                {!error && pendingUsers.length === 0 ? (\r\n                                     <TableRow>\r\n                                         <TableCell colSpan={6} align=\"center\" sx={{ py: 3, fontStyle: 'italic', color: 'text.secondary' }}>\r\n                                            No pending registrations found.\r\n                                         </TableCell>\r\n                                     </TableRow>\r\n                                ) : (\r\n                                     // Map users only if pendingUsers is an array and has items\r\n                                     Array.isArray(pendingUsers) && pendingUsers.map((user) => (\r\n                                        <TableRow hover key={user.customerId}>\r\n                                            <TableCell>{user.customerId || 'N/A'}</TableCell>\r\n                                             {/* Ensure fname/lname exist, provide fallback */}\r\n                                            <TableCell>{`${user.fname || ''} ${user.lname || ''}`.trim() || 'N/A'}</TableCell>\r\n                                            <TableCell>{user.email || 'N/A'}</TableCell>\r\n                                            <TableCell>{user.mobileNumber || 'N/A'}</TableCell>\r\n                                            <TableCell>{user.accountNumber || 'N/A'}</TableCell>\r\n                                            <TableCell align=\"center\"> {/* Center align actions */}\r\n                                                <Button\r\n                                                    variant=\"contained\"\r\n                                                    color=\"success\"\r\n                                                    size=\"small\"\r\n                                                    onClick={() => handleApprove(user.customerId)}\r\n                                                     sx={{ mr: 1, minWidth: '80px' }} // Ensure buttons have min width\r\n                                                >\r\n                                                    Approve\r\n                                                </Button>\r\n                                                <Button\r\n                                                    variant=\"contained\"\r\n                                                    color=\"error\"\r\n                                                    size=\"small\"\r\n                                                    onClick={() => handleReject(user.customerId)}\r\n                                                     sx={{ minWidth: '80px' }} // Ensure buttons have min width\r\n                                                >\r\n                                                    Reject\r\n                                                </Button>\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    ))\r\n                                )}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Paper>\r\n            )}\r\n        </Container>\r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}