{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\somna\\\\Documents\\\\Java_Backend\\\\Banking\\\\frontend_section\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// --- src/context/AuthContext.js ---\nimport React, { createContext, useState, useContext, useEffect } from 'react';\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\n\n// Create a provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [authState, setAuthState] = useState({\n    isLoggedIn: !!localStorage.getItem('isLoggedIn'),\n    // Check local storage on initial load\n    userRole: localStorage.getItem('userRole') || null,\n    customerId: localStorage.getItem('customerId') || null\n    // Add token state if you implement JWT later\n    // token: localStorage.getItem('jwtToken') || null\n  });\n\n  // Function to handle login\n  const login = (role, customerId /*, token */) => {\n    // Store in local storage\n    localStorage.setItem('isLoggedIn', 'true');\n    localStorage.setItem('userRole', role);\n    localStorage.setItem('customerId', customerId);\n    // if (token) localStorage.setItem('jwtToken', token);\n\n    // Update state\n    setAuthState({\n      isLoggedIn: true,\n      userRole: role,\n      customerId: customerId\n      // token: token\n    });\n  };\n\n  // Function to handle logout\n  const logout = () => {\n    // Clear local storage\n    localStorage.removeItem('isLoggedIn');\n    localStorage.removeItem('userRole');\n    localStorage.removeItem('customerId');\n    // localStorage.removeItem('jwtToken');\n\n    // Reset state\n    setAuthState({\n      isLoggedIn: false,\n      userRole: null,\n      customerId: null\n      // token: null\n    });\n  };\n\n  // Optional: Effect to sync state if localStorage changes in other tabs (less common for auth)\n  useEffect(() => {\n    const handleStorageChange = () => {\n      setAuthState({\n        isLoggedIn: !!localStorage.getItem('isLoggedIn'),\n        userRole: localStorage.getItem('userRole') || null,\n        customerId: localStorage.getItem('customerId') || null\n        // token: localStorage.getItem('jwtToken') || null\n      });\n    };\n    window.addEventListener('storage', handleStorageChange);\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      authState,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n};\n\n// Custom hook to use the auth context easily\n_s(AuthProvider, \"aXr+ZqfTfTt9jZcU8gpbxrC5G0U=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","authState","setAuthState","isLoggedIn","localStorage","getItem","userRole","customerId","login","role","setItem","logout","removeItem","handleStorageChange","window","addEventListener","removeEventListener","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/somna/Documents/Java_Backend/Banking/frontend_section/src/context/AuthContext.js"],"sourcesContent":["// --- src/context/AuthContext.js ---\r\nimport React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\n// Create the context\r\nconst AuthContext = createContext(null);\r\n\r\n// Create a provider component\r\nexport const AuthProvider = ({ children }) => {\r\n    const [authState, setAuthState] = useState({\r\n        isLoggedIn: !!localStorage.getItem('isLoggedIn'), // Check local storage on initial load\r\n        userRole: localStorage.getItem('userRole') || null,\r\n        customerId: localStorage.getItem('customerId') || null,\r\n        // Add token state if you implement JWT later\r\n        // token: localStorage.getItem('jwtToken') || null\r\n    });\r\n\r\n    // Function to handle login\r\n    const login = (role, customerId /*, token */) => {\r\n        // Store in local storage\r\n        localStorage.setItem('isLoggedIn', 'true');\r\n        localStorage.setItem('userRole', role);\r\n        localStorage.setItem('customerId', customerId);\r\n        // if (token) localStorage.setItem('jwtToken', token);\r\n\r\n        // Update state\r\n        setAuthState({\r\n            isLoggedIn: true,\r\n            userRole: role,\r\n            customerId: customerId,\r\n            // token: token\r\n        });\r\n    };\r\n\r\n    // Function to handle logout\r\n    const logout = () => {\r\n        // Clear local storage\r\n        localStorage.removeItem('isLoggedIn');\r\n        localStorage.removeItem('userRole');\r\n        localStorage.removeItem('customerId');\r\n        // localStorage.removeItem('jwtToken');\r\n\r\n        // Reset state\r\n        setAuthState({\r\n            isLoggedIn: false,\r\n            userRole: null,\r\n            customerId: null,\r\n            // token: null\r\n        });\r\n    };\r\n\r\n    // Optional: Effect to sync state if localStorage changes in other tabs (less common for auth)\r\n    useEffect(() => {\r\n        const handleStorageChange = () => {\r\n            setAuthState({\r\n                 isLoggedIn: !!localStorage.getItem('isLoggedIn'),\r\n                 userRole: localStorage.getItem('userRole') || null,\r\n                 customerId: localStorage.getItem('customerId') || null,\r\n                 // token: localStorage.getItem('jwtToken') || null\r\n            });\r\n        };\r\n        window.addEventListener('storage', handleStorageChange);\r\n        return () => {\r\n            window.removeEventListener('storage', handleStorageChange);\r\n        };\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ authState, login, logout }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\n// Custom hook to use the auth context easily\r\nexport const useAuth = () => {\r\n    return useContext(AuthContext);\r\n};"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;;AAE7E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGN,aAAa,CAAC,IAAI,CAAC;;AAEvC;AACA,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC;IACvCW,UAAU,EAAE,CAAC,CAACC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IAAE;IAClDC,QAAQ,EAAEF,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,IAAI,IAAI;IAClDE,UAAU,EAAEH,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,IAAI;IAClD;IACA;EACJ,CAAC,CAAC;;EAEF;EACA,MAAMG,KAAK,GAAGA,CAACC,IAAI,EAAEF,UAAU,CAAC,iBAAiB;IAC7C;IACAH,YAAY,CAACM,OAAO,CAAC,YAAY,EAAE,MAAM,CAAC;IAC1CN,YAAY,CAACM,OAAO,CAAC,UAAU,EAAED,IAAI,CAAC;IACtCL,YAAY,CAACM,OAAO,CAAC,YAAY,EAAEH,UAAU,CAAC;IAC9C;;IAEA;IACAL,YAAY,CAAC;MACTC,UAAU,EAAE,IAAI;MAChBG,QAAQ,EAAEG,IAAI;MACdF,UAAU,EAAEA;MACZ;IACJ,CAAC,CAAC;EACN,CAAC;;EAED;EACA,MAAMI,MAAM,GAAGA,CAAA,KAAM;IACjB;IACAP,YAAY,CAACQ,UAAU,CAAC,YAAY,CAAC;IACrCR,YAAY,CAACQ,UAAU,CAAC,UAAU,CAAC;IACnCR,YAAY,CAACQ,UAAU,CAAC,YAAY,CAAC;IACrC;;IAEA;IACAV,YAAY,CAAC;MACTC,UAAU,EAAE,KAAK;MACjBG,QAAQ,EAAE,IAAI;MACdC,UAAU,EAAE;MACZ;IACJ,CAAC,CAAC;EACN,CAAC;;EAED;EACAb,SAAS,CAAC,MAAM;IACZ,MAAMmB,mBAAmB,GAAGA,CAAA,KAAM;MAC9BX,YAAY,CAAC;QACRC,UAAU,EAAE,CAAC,CAACC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;QAChDC,QAAQ,EAAEF,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,IAAI,IAAI;QAClDE,UAAU,EAAEH,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,IAAI;QAClD;MACL,CAAC,CAAC;IACN,CAAC;IACDS,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEF,mBAAmB,CAAC;IACvD,OAAO,MAAM;MACTC,MAAM,CAACE,mBAAmB,CAAC,SAAS,EAAEH,mBAAmB,CAAC;IAC9D,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAGN,oBACIjB,OAAA,CAACC,WAAW,CAACoB,QAAQ;IAACC,KAAK,EAAE;MAAEjB,SAAS;MAAEO,KAAK;MAAEG;IAAO,CAAE;IAAAZ,QAAA,EACrDA;EAAQ;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;;AAED;AAAAtB,EAAA,CAnEaF,YAAY;AAAAyB,EAAA,GAAZzB,YAAY;AAoEzB,OAAO,MAAM0B,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACzB,OAAOhC,UAAU,CAACI,WAAW,CAAC;AAClC,CAAC;AAAC4B,GAAA,CAFWD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}