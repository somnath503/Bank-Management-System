{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\somna\\\\Documents\\\\Java_Backend\\\\Banking\\\\frontend_section\\\\src\\\\component\\\\Page\\\\TransferMoney.js\",\n  _s = $RefreshSig$();\n// --- src/component/Page/TransferMoneyPage.js ---\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { Container, Paper, Typography, TextField, Button, Box, CircularProgress, Alert } from '@mui/material';\nimport { useAuth } from '../../context/AuthContext';\nimport { useNavigate } from 'react-router-dom'; // If you want to redirect\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:8080';\nconst TransferMoneyPage = () => {\n  _s();\n  const {\n    authState\n  } = useAuth();\n  const navigate = useNavigate(); // For potential redirection\n\n  const [formData, setFormData] = useState({\n    senderMobileNo: authState.mobileNumber || '',\n    // Use authenticated user's mobile number\n    amount: '',\n    password: '',\n    receiverAccountNo: '',\n    receiverIFSCCode: '',\n    receiverBranchCode: '',\n    receiverMobileNo: ''\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [message, setMessage] = useState('');\n  const [messageSeverity, setMessageSeverity] = useState('info'); // 'success', 'error', 'info', 'warning'\n\n  // Ensure senderMobileNo is always the authenticated user's mobile number\n  // You might fetch user details on load if mobileNumber isn't directly in authState\n  // For simplicity, we'll assume authState.mobileNumber is available after login\n  // If not, you'll need to add useEffect to fetch user details and update state\n  React.useEffect(() => {\n    if (authState.isLoggedIn && authState.mobileNumber) {\n      setFormData(prevData => ({\n        ...prevData,\n        senderMobileNo: authState.mobileNumber\n      }));\n    } else {\n      // Handle case where user is not logged in\n      setMessage(\"Please log in to transfer money.\");\n      setMessageSeverity(\"warning\");\n      setFormData({\n        // Clear form if not logged in\n        senderMobileNo: '',\n        amount: '',\n        password: '',\n        receiverAccountNo: '',\n        receiverIFSCCode: '',\n        receiverBranchCode: '',\n        receiverMobileNo: ''\n      });\n    }\n  }, [authState.isLoggedIn, authState.mobileNumber]); // Depend on login status and mobile number\n\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n  };\n  const handleTransfer = async e => {\n    e.preventDefault(); // Prevent default form submission\n\n    if (!authState.isLoggedIn) {\n      setMessage(\"Please log in to transfer money.\");\n      setMessageSeverity(\"warning\");\n      return;\n    }\n\n    // Basic frontend validation\n    if (parseFloat(formData.amount) <= 0 || !formData.receiverAccountNo || !formData.receiverMobileNo || !formData.password) {\n      setMessage(\"Please fill in all required fields and ensure amount is positive.\");\n      setMessageSeverity(\"warning\");\n      return;\n    }\n    setIsLoading(true);\n    setMessage(''); // Clear previous messages\n\n    // Prepare the request body - ensure senderMobileNo is from authState!\n    const requestBody = {\n      senderMobileNo: authState.mobileNumber,\n      // Use the mobile number from authState!\n      amount: parseFloat(formData.amount),\n      // Convert amount to number\n      password: formData.password,\n      receiverAccountNo: formData.receiverAccountNo,\n      receiverIFSCCode: formData.receiverIFSCCode,\n      receiverBranchCode: formData.receiverBranchCode,\n      receiverMobileNo: formData.receiverMobileNo\n    };\n    console.log(\"Sending Transfer Request:\", requestBody);\n    try {\n      const response = await axios.post(`${API_BASE_URL}/transfer`, requestBody, {\n        withCredentials: true,\n        // Important for sending the session cookie\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log(\"Transfer Raw Response:\", response);\n      if (response.data && response.data.success === true) {\n        setMessage(`Transfer successful! ${response.data.message}`);\n        setMessageSeverity(\"success\");\n        // Optionally clear the form or redirect\n        setFormData(prevData => ({\n          // Clear most fields, keep sender mobile\n          ...prevData,\n          amount: '',\n          password: '',\n          receiverAccountNo: '',\n          receiverIFSCCode: '',\n          receiverBranchCode: '',\n          receiverMobileNo: ''\n        }));\n        // Consider navigating to the balance page after success\n        // navigate('/check-balance');\n      } else {\n        var _response$data;\n        const errorMsg = ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.message) || \"Transfer failed. Unexpected response format.\";\n        console.error(\"Transfer failed:\", errorMsg, response.data);\n        setMessage(`Transfer failed: ${errorMsg}`);\n        setMessageSeverity(\"error\");\n      }\n    } catch (error) {\n      console.error('Error during transfer:', error);\n      if (error.response) {\n        const errorData = error.response.data;\n        const errorMsg = (errorData === null || errorData === void 0 ? void 0 : errorData.message) || `Error: ${error.response.status}. Please check details.`;\n        setMessage(`Transfer failed: ${errorMsg}`);\n        setMessageSeverity(\"error\");\n        if (error.response.status === 401 || error.response.status === 403) {\n          setMessage(`Transfer failed: Authentication error. ${errorMsg}`);\n        }\n      } else if (error.request) {\n        setMessage(\"Transfer failed: Network error. Could not reach the server.\");\n        setMessageSeverity(\"error\");\n      } else {\n        setMessage(\"Transfer failed: An unexpected error occurred.\");\n        setMessageSeverity(\"error\");\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Prevent transfer if not logged in\n  if (!authState.isLoggedIn) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"sm\",\n      sx: {\n        mt: 4\n      },\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 3,\n        sx: {\n          p: 3,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          component: \"h1\",\n          gutterBottom: true,\n          children: \"Transfer Money\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"warning\",\n          sx: {\n            width: '100%',\n            mt: 2\n          },\n          children: \"Please log in to transfer money.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 18\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 14\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"sm\",\n    sx: {\n      mt: 4\n    },\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 3,\n      sx: {\n        p: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        component: \"h1\",\n        gutterBottom: true,\n        textAlign: \"center\",\n        children: \"Transfer Money\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        component: \"form\",\n        onSubmit: handleTransfer,\n        sx: {\n          mt: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: \"Sender Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Your Mobile Number (Sender)\",\n          value: formData.senderMobileNo // Display from state derived from authState\n          ,\n          fullWidth: true,\n          margin: \"normal\",\n          InputProps: {\n            readOnly: true // Make this field read-only\n          },\n          helperText: \"This is your registered mobile number.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Your Password (Sender)\",\n          type: \"password\" // Use password type\n          ,\n          name: \"password\",\n          value: formData.password,\n          onChange: handleInputChange,\n          fullWidth: true,\n          margin: \"normal\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Amount to Transfer\",\n          type: \"number\",\n          name: \"amount\",\n          value: formData.amount,\n          onChange: handleInputChange,\n          fullWidth: true,\n          margin: \"normal\",\n          required: true,\n          inputProps: {\n            min: \"0.01\",\n            step: \"0.01\"\n          } // Ensure positive amount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          sx: {\n            mt: 3\n          },\n          children: \"Receiver Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Receiver Account Number\",\n          name: \"receiverAccountNo\",\n          value: formData.receiverAccountNo,\n          onChange: handleInputChange,\n          fullWidth: true,\n          margin: \"normal\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Receiver IFSC Code\",\n          name: \"receiverIFSCCode\",\n          value: formData.receiverIFSCCode,\n          onChange: handleInputChange,\n          fullWidth: true,\n          margin: \"normal\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Receiver Branch Code\",\n          name: \"receiverBranchCode\",\n          value: formData.receiverBranchCode,\n          onChange: handleInputChange,\n          fullWidth: true,\n          margin: \"normal\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Receiver Mobile Number\",\n          name: \"receiverMobileNo\",\n          value: formData.receiverMobileNo,\n          onChange: handleInputChange,\n          fullWidth: true,\n          margin: \"normal\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 21\n        }, this), message && /*#__PURE__*/_jsxDEV(Alert, {\n          severity: messageSeverity,\n          sx: {\n            mt: 2\n          },\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"contained\",\n          color: \"primary\",\n          fullWidth: true,\n          size: \"large\",\n          sx: {\n            mt: 3\n          },\n          disabled: isLoading || !authState.isLoggedIn,\n          children: isLoading ? 'Transferring...' : 'Transfer Money'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 21\n        }, this), messageSeverity === 'success' && /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          color: \"primary\",\n          fullWidth: true,\n          size: \"large\",\n          sx: {\n            mt: 2\n          },\n          onClick: () => navigate('/check-balance'),\n          children: \"Check New Balance\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 9\n  }, this);\n};\n_s(TransferMoneyPage, \"DnrE9o0OnwMAjjfN/DVHpe7T6G8=\", false, function () {\n  return [useAuth, useNavigate];\n});\n_c = TransferMoneyPage;\nexport default TransferMoneyPage;\nvar _c;\n$RefreshReg$(_c, \"TransferMoneyPage\");","map":{"version":3,"names":["React","useState","axios","Container","Paper","Typography","TextField","Button","Box","CircularProgress","Alert","useAuth","useNavigate","jsxDEV","_jsxDEV","API_BASE_URL","TransferMoneyPage","_s","authState","navigate","formData","setFormData","senderMobileNo","mobileNumber","amount","password","receiverAccountNo","receiverIFSCCode","receiverBranchCode","receiverMobileNo","isLoading","setIsLoading","message","setMessage","messageSeverity","setMessageSeverity","useEffect","isLoggedIn","prevData","handleInputChange","e","name","value","target","handleTransfer","preventDefault","parseFloat","requestBody","console","log","response","post","withCredentials","headers","data","success","_response$data","errorMsg","error","errorData","status","request","maxWidth","sx","mt","children","elevation","p","display","flexDirection","alignItems","variant","component","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","severity","width","textAlign","onSubmit","label","fullWidth","margin","InputProps","readOnly","helperText","type","onChange","required","inputProps","min","step","color","size","disabled","onClick","_c","$RefreshReg$"],"sources":["C:/Users/somna/Documents/Java_Backend/Banking/frontend_section/src/component/Page/TransferMoney.js"],"sourcesContent":["// --- src/component/Page/TransferMoneyPage.js ---\r\nimport React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { Container, Paper, Typography, TextField, Button, Box, CircularProgress, Alert } from '@mui/material';\r\nimport { useAuth } from '../../context/AuthContext';\r\nimport { useNavigate } from 'react-router-dom'; // If you want to redirect\r\n\r\nconst API_BASE_URL = 'http://localhost:8080';\r\n\r\nconst TransferMoneyPage = () => {\r\n    const { authState } = useAuth();\r\n    const navigate = useNavigate(); // For potential redirection\r\n\r\n    const [formData, setFormData] = useState({\r\n        senderMobileNo: authState.mobileNumber || '', // Use authenticated user's mobile number\r\n        amount: '',\r\n        password: '',\r\n        receiverAccountNo: '',\r\n        receiverIFSCCode: '',\r\n        receiverBranchCode: '',\r\n        receiverMobileNo: ''\r\n    });\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [message, setMessage] = useState('');\r\n    const [messageSeverity, setMessageSeverity] = useState('info'); // 'success', 'error', 'info', 'warning'\r\n\r\n    // Ensure senderMobileNo is always the authenticated user's mobile number\r\n    // You might fetch user details on load if mobileNumber isn't directly in authState\r\n    // For simplicity, we'll assume authState.mobileNumber is available after login\r\n    // If not, you'll need to add useEffect to fetch user details and update state\r\n     React.useEffect(() => {\r\n        if (authState.isLoggedIn && authState.mobileNumber) {\r\n            setFormData(prevData => ({\r\n                ...prevData,\r\n                senderMobileNo: authState.mobileNumber\r\n            }));\r\n        } else {\r\n            // Handle case where user is not logged in\r\n            setMessage(\"Please log in to transfer money.\");\r\n            setMessageSeverity(\"warning\");\r\n            setFormData({ // Clear form if not logged in\r\n                senderMobileNo: '',\r\n                amount: '',\r\n                password: '',\r\n                receiverAccountNo: '',\r\n                receiverIFSCCode: '',\r\n                receiverBranchCode: '',\r\n                receiverMobileNo: ''\r\n            });\r\n        }\r\n    }, [authState.isLoggedIn, authState.mobileNumber]); // Depend on login status and mobile number\r\n\r\n\r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setFormData({\r\n            ...formData,\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n    const handleTransfer = async (e) => {\r\n        e.preventDefault(); // Prevent default form submission\r\n\r\n        if (!authState.isLoggedIn) {\r\n            setMessage(\"Please log in to transfer money.\");\r\n            setMessageSeverity(\"warning\");\r\n            return;\r\n        }\r\n\r\n         // Basic frontend validation\r\n        if (parseFloat(formData.amount) <= 0 || !formData.receiverAccountNo || !formData.receiverMobileNo || !formData.password) {\r\n             setMessage(\"Please fill in all required fields and ensure amount is positive.\");\r\n             setMessageSeverity(\"warning\");\r\n             return;\r\n         }\r\n\r\n\r\n        setIsLoading(true);\r\n        setMessage(''); // Clear previous messages\r\n\r\n        // Prepare the request body - ensure senderMobileNo is from authState!\r\n        const requestBody = {\r\n            senderMobileNo: authState.mobileNumber, // Use the mobile number from authState!\r\n            amount: parseFloat(formData.amount), // Convert amount to number\r\n            password: formData.password,\r\n            receiverAccountNo: formData.receiverAccountNo,\r\n            receiverIFSCCode: formData.receiverIFSCCode,\r\n            receiverBranchCode: formData.receiverBranchCode,\r\n            receiverMobileNo: formData.receiverMobileNo\r\n        };\r\n\r\n        console.log(\"Sending Transfer Request:\", requestBody);\r\n\r\n        try {\r\n            const response = await axios.post(`${API_BASE_URL}/transfer`, requestBody, {\r\n                withCredentials: true, // Important for sending the session cookie\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n\r\n            console.log(\"Transfer Raw Response:\", response);\r\n\r\n            if (response.data && response.data.success === true) {\r\n                setMessage(`Transfer successful! ${response.data.message}`);\r\n                setMessageSeverity(\"success\");\r\n                // Optionally clear the form or redirect\r\n                setFormData(prevData => ({ // Clear most fields, keep sender mobile\r\n                     ...prevData,\r\n                     amount: '',\r\n                     password: '',\r\n                     receiverAccountNo: '',\r\n                     receiverIFSCCode: '',\r\n                     receiverBranchCode: '',\r\n                     receiverMobileNo: ''\r\n                 }));\r\n                // Consider navigating to the balance page after success\r\n                 // navigate('/check-balance');\r\n            } else {\r\n                const errorMsg = response.data?.message || \"Transfer failed. Unexpected response format.\";\r\n                 console.error(\"Transfer failed:\", errorMsg, response.data);\r\n                setMessage(`Transfer failed: ${errorMsg}`);\r\n                setMessageSeverity(\"error\");\r\n            }\r\n        } catch (error) {\r\n            console.error('Error during transfer:', error);\r\n            if (error.response) {\r\n                const errorData = error.response.data;\r\n                const errorMsg = errorData?.message || `Error: ${error.response.status}. Please check details.`;\r\n                setMessage(`Transfer failed: ${errorMsg}`);\r\n                 setMessageSeverity(\"error\");\r\n                if (error.response.status === 401 || error.response.status === 403) {\r\n                     setMessage(`Transfer failed: Authentication error. ${errorMsg}`);\r\n                 }\r\n            } else if (error.request) {\r\n                setMessage(\"Transfer failed: Network error. Could not reach the server.\");\r\n                 setMessageSeverity(\"error\");\r\n            } else {\r\n                setMessage(\"Transfer failed: An unexpected error occurred.\");\r\n                 setMessageSeverity(\"error\");\r\n            }\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    // Prevent transfer if not logged in\r\n    if (!authState.isLoggedIn) {\r\n        return (\r\n             <Container maxWidth=\"sm\" sx={{ mt: 4 }}>\r\n                 <Paper elevation={3} sx={{ p: 3, display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n                     <Typography variant=\"h4\" component=\"h1\" gutterBottom>\r\n                         Transfer Money\r\n                     </Typography>\r\n                      <Alert severity=\"warning\" sx={{ width: '100%', mt: 2 }}>\r\n                         Please log in to transfer money.\r\n                     </Alert>\r\n                 </Paper>\r\n             </Container>\r\n        );\r\n     }\r\n\r\n\r\n    return (\r\n        <Container maxWidth=\"sm\" sx={{ mt: 4 }}>\r\n            <Paper elevation={3} sx={{ p: 3 }}>\r\n                <Typography variant=\"h4\" component=\"h1\" gutterBottom textAlign=\"center\">\r\n                    Transfer Money\r\n                </Typography>\r\n\r\n                <Box component=\"form\" onSubmit={handleTransfer} sx={{ mt: 2 }}>\r\n\r\n                    {/* Sender Info (Display only, from authState) */}\r\n                     <Typography variant=\"h6\" gutterBottom>\r\n                         Sender Details\r\n                     </Typography>\r\n                     <TextField\r\n                         label=\"Your Mobile Number (Sender)\"\r\n                         value={formData.senderMobileNo} // Display from state derived from authState\r\n                         fullWidth\r\n                         margin=\"normal\"\r\n                         InputProps={{\r\n                             readOnly: true, // Make this field read-only\r\n                         }}\r\n                         helperText=\"This is your registered mobile number.\"\r\n                     />\r\n                      <TextField\r\n                         label=\"Your Password (Sender)\"\r\n                         type=\"password\" // Use password type\r\n                         name=\"password\"\r\n                         value={formData.password}\r\n                         onChange={handleInputChange}\r\n                         fullWidth\r\n                         margin=\"normal\"\r\n                         required\r\n                     />\r\n\r\n                    {/* Amount */}\r\n                    <TextField\r\n                        label=\"Amount to Transfer\"\r\n                        type=\"number\"\r\n                        name=\"amount\"\r\n                        value={formData.amount}\r\n                        onChange={handleInputChange}\r\n                        fullWidth\r\n                        margin=\"normal\"\r\n                        required\r\n                        inputProps={{ min: \"0.01\", step: \"0.01\" }} // Ensure positive amount\r\n                    />\r\n\r\n                    <Typography variant=\"h6\" gutterBottom sx={{ mt: 3 }}>\r\n                        Receiver Details\r\n                    </Typography>\r\n                    <TextField\r\n                        label=\"Receiver Account Number\"\r\n                        name=\"receiverAccountNo\"\r\n                        value={formData.receiverAccountNo}\r\n                        onChange={handleInputChange}\r\n                        fullWidth\r\n                        margin=\"normal\"\r\n                        required\r\n                    />\r\n                     <TextField\r\n                        label=\"Receiver IFSC Code\"\r\n                        name=\"receiverIFSCCode\"\r\n                        value={formData.receiverIFSCCode}\r\n                        onChange={handleInputChange}\r\n                        fullWidth\r\n                        margin=\"normal\"\r\n                        required\r\n                    />\r\n                     <TextField\r\n                        label=\"Receiver Branch Code\"\r\n                        name=\"receiverBranchCode\"\r\n                        value={formData.receiverBranchCode}\r\n                        onChange={handleInputChange}\r\n                        fullWidth\r\n                        margin=\"normal\"\r\n                        required\r\n                    />\r\n                    <TextField\r\n                        label=\"Receiver Mobile Number\"\r\n                        name=\"receiverMobileNo\"\r\n                        value={formData.receiverMobileNo}\r\n                        onChange={handleInputChange}\r\n                        fullWidth\r\n                        margin=\"normal\"\r\n                        required\r\n                    />\r\n\r\n\r\n                    {/* Messages */}\r\n                    {message && (\r\n                        <Alert severity={messageSeverity} sx={{ mt: 2 }}>\r\n                            {message}\r\n                        </Alert>\r\n                    )}\r\n\r\n                    {/* Submit Button */}\r\n                    <Button\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        fullWidth\r\n                        size=\"large\"\r\n                        sx={{ mt: 3 }}\r\n                        disabled={isLoading || !authState.isLoggedIn}\r\n                    >\r\n                        {isLoading ? 'Transferring...' : 'Transfer Money'}\r\n                    </Button>\r\n\r\n                     {/* Optional: Button to check balance after transfer */}\r\n                     {messageSeverity === 'success' && (\r\n                         <Button\r\n                             variant=\"outlined\"\r\n                             color=\"primary\"\r\n                             fullWidth\r\n                             size=\"large\"\r\n                             sx={{ mt: 2 }}\r\n                             onClick={() => navigate('/check-balance')}\r\n                         >\r\n                             Check New Balance\r\n                         </Button>\r\n                     )}\r\n\r\n                </Box>\r\n            </Paper>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default TransferMoneyPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}