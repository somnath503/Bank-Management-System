{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\somna\\\\Documents\\\\Java_Backend\\\\Banking\\\\frontend_section\\\\src\\\\component\\\\Page\\\\Customer_Dash.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\n\n// Import MUI components\nimport { Container, Box, TextField, Button, Typography, CircularProgress, Alert // Using Alert for better error display\n} from '@mui/material';\n\n// No need for separate CSS file if using MUI predominantly, unless needed for specific overrides.\n// import '../cssfiles/Customer_Dash.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Customer_Dash({\n  setIsLoggedIn\n}) {\n  _s();\n  const navigate = useNavigate();\n\n  // State for form data - includes customerId now\n  const [formData, setFormData] = useState({\n    mobileNumber: '',\n    password: '',\n    customerId: '' // Added Customer ID field\n  });\n\n  // State for loading indication\n  const [isLoading, setIsLoading] = useState(false);\n  // State for error messages\n  const [errorMessage, setErrorMessage] = useState('');\n\n  // Handler for input changes\n  const handleChange = e => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n    // Optionally clear error when user starts typing again\n    if (errorMessage) {\n      setErrorMessage('');\n    }\n  };\n\n  // Handler for navigating to registration\n  const redirectToRegistration = () => {\n    // Use navigate instead of window.location.href for SPA navigation\n    navigate(\"/register\");\n  };\n\n  // Handler for form submission\n  const handleSubmit = async e => {\n    e.preventDefault(); // Prevent default form submission\n    setErrorMessage(''); // Clear previous errors\n    setIsLoading(true); // Start loading indicator\n\n    console.log(\"Attempting login with:\", \"Mobile Number: \" + formData.mobileNumber, \"Customer ID: \" + formData.customerId,\n    // Log customer ID\n    \"Password: \" + formData.password // Password should generally not be logged in production\n    );\n\n    // **IMPORTANT**: Your current backend '/login' endpoint seems to only expect\n    // mobileNumber and password based on your original code.\n    // If the backend requires customerId as well, you MUST update the backend\n    // AND include it in the 'data' object below.\n    const data = {\n      mobileNumber: formData.mobileNumber,\n      password: formData.password\n      // customerId: formData.customerId // <-- Add this if backend needs it\n    };\n    try {\n      const response = await axios.post(\"http://localhost:8080/login\", data);\n      const token = response.data.token; // Assuming token is in response.data.token\n\n      console.log(\"Login successful, received token:\", token);\n      // TODO: Store the token securely (e.g., localStorage, sessionStorage, context)\n\n      setIsLoggedIn(true); // Update parent component state\n      navigate(\"/header\"); // Navigate to dashboard/header page on success\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      if (error.response) {\n        var _error$response$data;\n        // Server responded with a status code outside 2xx range\n        console.error(\"Error response data:\", error.response.data);\n        console.error(\"Error response status:\", error.response.status);\n        // Use a more specific message from the backend if available, otherwise generic\n        setErrorMessage(((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.response.data || `Login failed (Status: ${error.response.status})`);\n      } else if (error.request) {\n        // The request was made but no response was received\n        console.error(\"Error request:\", error.request);\n        setErrorMessage(\"Network error. Could not reach the server. Please try again.\");\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        console.error('Error message:', error.message);\n        setErrorMessage(\"An unexpected error occurred. Please try again.\");\n      }\n      setIsLoggedIn(false); // Ensure login state is false on error\n    } finally {\n      setIsLoading(false); // Stop loading indicator regardless of success/failure\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    component: \"main\",\n    maxWidth: \"xs\",\n    children: [\" \", /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        marginTop: 8,\n        // Margin top\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        component: \"h1\",\n        variant: \"h5\",\n        children: \"Customer Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), errorMessage && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        sx: {\n          width: '100%',\n          mt: 2\n        },\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        component: \"form\",\n        onSubmit: handleSubmit,\n        noValidate: true,\n        sx: {\n          mt: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          margin: \"normal\" // Adds top and bottom margin\n          ,\n          required: true,\n          fullWidth: true,\n          id: \"mobileNumber\",\n          label: \"Mobile Number\",\n          name: \"mobileNumber\" // Must match key in formData state\n          ,\n          type: \"tel\" // Use 'tel' type for mobile numbers\n          ,\n          autoComplete: \"tel\",\n          autoFocus: true // Focus this field first\n          ,\n          value: formData.mobileNumber,\n          onChange: handleChange,\n          disabled: isLoading,\n          error: !!errorMessage // Highlight field if there's an error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          margin: \"normal\"\n          // required // Only make required if backend needs it for login\n          ,\n          fullWidth: true,\n          id: \"customerId\",\n          label: \"Customer ID\",\n          name: \"customerId\" // Must match key in formData state\n          ,\n          type: \"text\" // Or number, depending on format\n          ,\n          value: formData.customerId,\n          onChange: handleChange,\n          disabled: isLoading\n          // error={!!errorMessage} // Decide if this should be highlighted on generic errors\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          margin: \"normal\",\n          required: true,\n          fullWidth: true,\n          name: \"password\" // Must match key in formData state\n          ,\n          label: \"Password\",\n          type: \"password\",\n          id: \"password\",\n          autoComplete: \"current-password\",\n          value: formData.password,\n          onChange: handleChange,\n          disabled: isLoading,\n          error: !!errorMessage // Highlight field if there's an error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          fullWidth: true,\n          variant: \"contained\" // MUI standard filled button\n          ,\n          sx: {\n            mt: 3,\n            mb: 2\n          } // Margin top and bottom\n          ,\n          disabled: isLoading // Disable button when loading\n          ,\n          children: isLoading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 24,\n            color: \"inherit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 38\n          }, this) : 'Login'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          fullWidth: true,\n          variant: \"outlined\" // MUI outlined button style\n          ,\n          onClick: redirectToRegistration,\n          disabled: isLoading // Optionally disable during login attempt\n          ,\n          sx: {\n            mb: 2\n          },\n          children: \"Don't have an account? Register\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n}\n_s(Customer_Dash, \"lZQlpqVkyvuFn4nuJNvwCyUmEok=\", false, function () {\n  return [useNavigate];\n});\n_c = Customer_Dash;\nvar _c;\n$RefreshReg$(_c, \"Customer_Dash\");","map":{"version":3,"names":["React","useState","axios","useNavigate","Container","Box","TextField","Button","Typography","CircularProgress","Alert","jsxDEV","_jsxDEV","Customer_Dash","setIsLoggedIn","_s","navigate","formData","setFormData","mobileNumber","password","customerId","isLoading","setIsLoading","errorMessage","setErrorMessage","handleChange","e","target","name","value","redirectToRegistration","handleSubmit","preventDefault","console","log","data","response","post","token","error","_error$response$data","status","message","request","component","maxWidth","children","sx","marginTop","display","flexDirection","alignItems","variant","fileName","_jsxFileName","lineNumber","columnNumber","severity","width","mt","onSubmit","noValidate","margin","required","fullWidth","id","label","type","autoComplete","autoFocus","onChange","disabled","mb","size","color","onClick","_c","$RefreshReg$"],"sources":["C:/Users/somna/Documents/Java_Backend/Banking/frontend_section/src/component/Page/Customer_Dash.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n// Import MUI components\r\nimport {\r\n    Container,\r\n    Box,\r\n    TextField,\r\n    Button,\r\n    Typography,\r\n    CircularProgress,\r\n    Alert // Using Alert for better error display\r\n} from '@mui/material';\r\n\r\n// No need for separate CSS file if using MUI predominantly, unless needed for specific overrides.\r\n// import '../cssfiles/Customer_Dash.css';\r\n\r\nexport default function Customer_Dash({ setIsLoggedIn }) {\r\n    const navigate = useNavigate();\r\n\r\n    // State for form data - includes customerId now\r\n    const [formData, setFormData] = useState({\r\n        mobileNumber: '',\r\n        password: '',\r\n        customerId: '' // Added Customer ID field\r\n    });\r\n\r\n    // State for loading indication\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    // State for error messages\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n\r\n    // Handler for input changes\r\n    const handleChange = (e) => {\r\n        setFormData({\r\n            ...formData,\r\n            [e.target.name]: e.target.value\r\n        });\r\n        // Optionally clear error when user starts typing again\r\n        if (errorMessage) {\r\n            setErrorMessage('');\r\n        }\r\n    };\r\n\r\n    // Handler for navigating to registration\r\n    const redirectToRegistration = () => {\r\n        // Use navigate instead of window.location.href for SPA navigation\r\n        navigate(\"/register\");\r\n    };\r\n\r\n    // Handler for form submission\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault(); // Prevent default form submission\r\n        setErrorMessage(''); // Clear previous errors\r\n        setIsLoading(true);  // Start loading indicator\r\n\r\n        console.log(\r\n            \"Attempting login with:\",\r\n            \"Mobile Number: \" + formData.mobileNumber,\r\n            \"Customer ID: \" + formData.customerId, // Log customer ID\r\n            \"Password: \" + formData.password // Password should generally not be logged in production\r\n        );\r\n\r\n        // **IMPORTANT**: Your current backend '/login' endpoint seems to only expect\r\n        // mobileNumber and password based on your original code.\r\n        // If the backend requires customerId as well, you MUST update the backend\r\n        // AND include it in the 'data' object below.\r\n        const data = {\r\n            mobileNumber: formData.mobileNumber,\r\n            password: formData.password\r\n            // customerId: formData.customerId // <-- Add this if backend needs it\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(\"http://localhost:8080/login\", data);\r\n            const token = response.data.token; // Assuming token is in response.data.token\r\n\r\n            console.log(\"Login successful, received token:\", token);\r\n            // TODO: Store the token securely (e.g., localStorage, sessionStorage, context)\r\n\r\n            setIsLoggedIn(true); // Update parent component state\r\n            navigate(\"/header\"); // Navigate to dashboard/header page on success\r\n\r\n        } catch (error) {\r\n            console.error(\"Login error:\", error);\r\n            if (error.response) {\r\n                // Server responded with a status code outside 2xx range\r\n                console.error(\"Error response data:\", error.response.data);\r\n                console.error(\"Error response status:\", error.response.status);\r\n                // Use a more specific message from the backend if available, otherwise generic\r\n                setErrorMessage(error.response.data?.message || error.response.data || `Login failed (Status: ${error.response.status})`);\r\n            } else if (error.request) {\r\n                // The request was made but no response was received\r\n                console.error(\"Error request:\", error.request);\r\n                setErrorMessage(\"Network error. Could not reach the server. Please try again.\");\r\n            } else {\r\n                // Something happened in setting up the request that triggered an Error\r\n                console.error('Error message:', error.message);\r\n                setErrorMessage(\"An unexpected error occurred. Please try again.\");\r\n            }\r\n            setIsLoggedIn(false); // Ensure login state is false on error\r\n        } finally {\r\n            setIsLoading(false); // Stop loading indicator regardless of success/failure\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\"> {/* Limits width for a typical form */}\r\n            <Box\r\n                sx={{\r\n                    marginTop: 8, // Margin top\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                    alignItems: 'center',\r\n                }}\r\n            >\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Customer Login\r\n                </Typography>\r\n\r\n                {/* Display Error Message using MUI Alert */}\r\n                {errorMessage && (\r\n                    <Alert severity=\"error\" sx={{ width: '100%', mt: 2 }}>\r\n                        {errorMessage}\r\n                    </Alert>\r\n                )}\r\n\r\n                <Box component=\"form\" onSubmit={handleSubmit} noValidate sx={{ mt: 1 }}>\r\n                    {/* Mobile Number Input */}\r\n                    <TextField\r\n                        margin=\"normal\" // Adds top and bottom margin\r\n                        required\r\n                        fullWidth\r\n                        id=\"mobileNumber\"\r\n                        label=\"Mobile Number\"\r\n                        name=\"mobileNumber\" // Must match key in formData state\r\n                        type=\"tel\" // Use 'tel' type for mobile numbers\r\n                        autoComplete=\"tel\"\r\n                        autoFocus // Focus this field first\r\n                        value={formData.mobileNumber}\r\n                        onChange={handleChange}\r\n                        disabled={isLoading}\r\n                        error={!!errorMessage} // Highlight field if there's an error\r\n                    />\r\n\r\n                    {/* Customer ID Input */}\r\n                    <TextField\r\n                        margin=\"normal\"\r\n                        // required // Only make required if backend needs it for login\r\n                        fullWidth\r\n                        id=\"customerId\"\r\n                        label=\"Customer ID\"\r\n                        name=\"customerId\" // Must match key in formData state\r\n                        type=\"text\" // Or number, depending on format\r\n                        value={formData.customerId}\r\n                        onChange={handleChange}\r\n                        disabled={isLoading}\r\n                        // error={!!errorMessage} // Decide if this should be highlighted on generic errors\r\n                    />\r\n\r\n                    {/* Password Input */}\r\n                    <TextField\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"password\" // Must match key in formData state\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        autoComplete=\"current-password\"\r\n                        value={formData.password}\r\n                        onChange={handleChange}\r\n                        disabled={isLoading}\r\n                        error={!!errorMessage} // Highlight field if there's an error\r\n                    />\r\n\r\n                    {/* Login Button with Loading Indicator */}\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\" // MUI standard filled button\r\n                        sx={{ mt: 3, mb: 2 }} // Margin top and bottom\r\n                        disabled={isLoading} // Disable button when loading\r\n                    >\r\n                        {isLoading ? <CircularProgress size={24} color=\"inherit\" /> : 'Login'}\r\n                    </Button>\r\n\r\n                    {/* Optional: Link/Button to Registration Page */}\r\n                    <Button\r\n                        fullWidth\r\n                        variant=\"outlined\" // MUI outlined button style\r\n                        onClick={redirectToRegistration}\r\n                        disabled={isLoading} // Optionally disable during login attempt\r\n                        sx={{ mb: 2 }}\r\n                    >\r\n                        Don't have an account? Register\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n        </Container>\r\n    );\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;;AAE9C;AACA,SACIC,SAAS,EACTC,GAAG,EACHC,SAAS,EACTC,MAAM,EACNC,UAAU,EACVC,gBAAgB,EAChBC,KAAK,CAAC;AAAA,OACH,eAAe;;AAEtB;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,eAAe,SAASC,aAAaA,CAAC;EAAEC;AAAc,CAAC,EAAE;EAAAC,EAAA;EACrD,MAAMC,QAAQ,GAAGb,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC;IACrCkB,YAAY,EAAE,EAAE;IAChBC,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE,EAAE,CAAC;EACnB,CAAC,CAAC;;EAEF;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EACjD;EACA,MAAM,CAACuB,YAAY,EAAEC,eAAe,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;;EAEpD;EACA,MAAMyB,YAAY,GAAIC,CAAC,IAAK;IACxBT,WAAW,CAAC;MACR,GAAGD,QAAQ;MACX,CAACU,CAAC,CAACC,MAAM,CAACC,IAAI,GAAGF,CAAC,CAACC,MAAM,CAACE;IAC9B,CAAC,CAAC;IACF;IACA,IAAIN,YAAY,EAAE;MACdC,eAAe,CAAC,EAAE,CAAC;IACvB;EACJ,CAAC;;EAED;EACA,MAAMM,sBAAsB,GAAGA,CAAA,KAAM;IACjC;IACAf,QAAQ,CAAC,WAAW,CAAC;EACzB,CAAC;;EAED;EACA,MAAMgB,YAAY,GAAG,MAAOL,CAAC,IAAK;IAC9BA,CAAC,CAACM,cAAc,CAAC,CAAC,CAAC,CAAC;IACpBR,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC;IACrBF,YAAY,CAAC,IAAI,CAAC,CAAC,CAAE;;IAErBW,OAAO,CAACC,GAAG,CACP,wBAAwB,EACxB,iBAAiB,GAAGlB,QAAQ,CAACE,YAAY,EACzC,eAAe,GAAGF,QAAQ,CAACI,UAAU;IAAE;IACvC,YAAY,GAAGJ,QAAQ,CAACG,QAAQ,CAAC;IACrC,CAAC;;IAED;IACA;IACA;IACA;IACA,MAAMgB,IAAI,GAAG;MACTjB,YAAY,EAAEF,QAAQ,CAACE,YAAY;MACnCC,QAAQ,EAAEH,QAAQ,CAACG;MACnB;IACJ,CAAC;IAED,IAAI;MACA,MAAMiB,QAAQ,GAAG,MAAMnC,KAAK,CAACoC,IAAI,CAAC,6BAA6B,EAAEF,IAAI,CAAC;MACtE,MAAMG,KAAK,GAAGF,QAAQ,CAACD,IAAI,CAACG,KAAK,CAAC,CAAC;;MAEnCL,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEI,KAAK,CAAC;MACvD;;MAEAzB,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;MACrBE,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;IAEzB,CAAC,CAAC,OAAOwB,KAAK,EAAE;MACZN,OAAO,CAACM,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,IAAIA,KAAK,CAACH,QAAQ,EAAE;QAAA,IAAAI,oBAAA;QAChB;QACAP,OAAO,CAACM,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACH,QAAQ,CAACD,IAAI,CAAC;QAC1DF,OAAO,CAACM,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAACH,QAAQ,CAACK,MAAM,CAAC;QAC9D;QACAjB,eAAe,CAAC,EAAAgB,oBAAA,GAAAD,KAAK,CAACH,QAAQ,CAACD,IAAI,cAAAK,oBAAA,uBAAnBA,oBAAA,CAAqBE,OAAO,KAAIH,KAAK,CAACH,QAAQ,CAACD,IAAI,IAAI,yBAAyBI,KAAK,CAACH,QAAQ,CAACK,MAAM,GAAG,CAAC;MAC7H,CAAC,MAAM,IAAIF,KAAK,CAACI,OAAO,EAAE;QACtB;QACAV,OAAO,CAACM,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAACI,OAAO,CAAC;QAC9CnB,eAAe,CAAC,8DAA8D,CAAC;MACnF,CAAC,MAAM;QACH;QACAS,OAAO,CAACM,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAACG,OAAO,CAAC;QAC9ClB,eAAe,CAAC,iDAAiD,CAAC;MACtE;MACAX,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;IAC1B,CAAC,SAAS;MACNS,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;IACzB;EACJ,CAAC;EAED,oBACIX,OAAA,CAACR,SAAS;IAACyC,SAAS,EAAC,MAAM;IAACC,QAAQ,EAAC,IAAI;IAAAC,QAAA,GAAC,GAAC,eACvCnC,OAAA,CAACP,GAAG;MACA2C,EAAE,EAAE;QACAC,SAAS,EAAE,CAAC;QAAE;QACdC,OAAO,EAAE,MAAM;QACfC,aAAa,EAAE,QAAQ;QACvBC,UAAU,EAAE;MAChB,CAAE;MAAAL,QAAA,gBAEFnC,OAAA,CAACJ,UAAU;QAACqC,SAAS,EAAC,IAAI;QAACQ,OAAO,EAAC,IAAI;QAAAN,QAAA,EAAC;MAExC;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,EAGZjC,YAAY,iBACTZ,OAAA,CAACF,KAAK;QAACgD,QAAQ,EAAC,OAAO;QAACV,EAAE,EAAE;UAAEW,KAAK,EAAE,MAAM;UAAEC,EAAE,EAAE;QAAE,CAAE;QAAAb,QAAA,EAChDvB;MAAY;QAAA8B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACV,CACV,eAED7C,OAAA,CAACP,GAAG;QAACwC,SAAS,EAAC,MAAM;QAACgB,QAAQ,EAAE7B,YAAa;QAAC8B,UAAU;QAACd,EAAE,EAAE;UAAEY,EAAE,EAAE;QAAE,CAAE;QAAAb,QAAA,gBAEnEnC,OAAA,CAACN,SAAS;UACNyD,MAAM,EAAC,QAAQ,CAAC;UAAA;UAChBC,QAAQ;UACRC,SAAS;UACTC,EAAE,EAAC,cAAc;UACjBC,KAAK,EAAC,eAAe;UACrBtC,IAAI,EAAC,cAAc,CAAC;UAAA;UACpBuC,IAAI,EAAC,KAAK,CAAC;UAAA;UACXC,YAAY,EAAC,KAAK;UAClBC,SAAS,OAAC;UAAA;UACVxC,KAAK,EAAEb,QAAQ,CAACE,YAAa;UAC7BoD,QAAQ,EAAE7C,YAAa;UACvB8C,QAAQ,EAAElD,SAAU;UACpBkB,KAAK,EAAE,CAAC,CAAChB,YAAa,CAAC;QAAA;UAAA8B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1B,CAAC,eAGF7C,OAAA,CAACN,SAAS;UACNyD,MAAM,EAAC;UACP;UAAA;UACAE,SAAS;UACTC,EAAE,EAAC,YAAY;UACfC,KAAK,EAAC,aAAa;UACnBtC,IAAI,EAAC,YAAY,CAAC;UAAA;UAClBuC,IAAI,EAAC,MAAM,CAAC;UAAA;UACZtC,KAAK,EAAEb,QAAQ,CAACI,UAAW;UAC3BkD,QAAQ,EAAE7C,YAAa;UACvB8C,QAAQ,EAAElD;UACV;QAAA;UAAAgC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eAGF7C,OAAA,CAACN,SAAS;UACNyD,MAAM,EAAC,QAAQ;UACfC,QAAQ;UACRC,SAAS;UACTpC,IAAI,EAAC,UAAU,CAAC;UAAA;UAChBsC,KAAK,EAAC,UAAU;UAChBC,IAAI,EAAC,UAAU;UACfF,EAAE,EAAC,UAAU;UACbG,YAAY,EAAC,kBAAkB;UAC/BvC,KAAK,EAAEb,QAAQ,CAACG,QAAS;UACzBmD,QAAQ,EAAE7C,YAAa;UACvB8C,QAAQ,EAAElD,SAAU;UACpBkB,KAAK,EAAE,CAAC,CAAChB,YAAa,CAAC;QAAA;UAAA8B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1B,CAAC,eAGF7C,OAAA,CAACL,MAAM;UACH6D,IAAI,EAAC,QAAQ;UACbH,SAAS;UACTZ,OAAO,EAAC,WAAW,CAAC;UAAA;UACpBL,EAAE,EAAE;YAAEY,EAAE,EAAE,CAAC;YAAEa,EAAE,EAAE;UAAE,CAAE,CAAC;UAAA;UACtBD,QAAQ,EAAElD,SAAU,CAAC;UAAA;UAAAyB,QAAA,EAEpBzB,SAAS,gBAAGV,OAAA,CAACH,gBAAgB;YAACiE,IAAI,EAAE,EAAG;YAACC,KAAK,EAAC;UAAS;YAAArB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,GAAG;QAAO;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjE,CAAC,eAGT7C,OAAA,CAACL,MAAM;UACH0D,SAAS;UACTZ,OAAO,EAAC,UAAU,CAAC;UAAA;UACnBuB,OAAO,EAAE7C,sBAAuB;UAChCyC,QAAQ,EAAElD,SAAU,CAAC;UAAA;UACrB0B,EAAE,EAAE;YAAEyB,EAAE,EAAE;UAAE,CAAE;UAAA1B,QAAA,EACjB;QAED;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEpB;AAAC1C,EAAA,CAxLuBF,aAAa;EAAA,QAChBV,WAAW;AAAA;AAAA0E,EAAA,GADRhE,aAAa;AAAA,IAAAgE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}