{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\somna\\\\Documents\\\\Java_Backend\\\\Banking\\\\frontend_section\\\\src\\\\component\\\\Page\\\\TransactionHistoryPage.js\",\n  _s = $RefreshSig$();\n// --- src/component/Page/Employee/EmployeeDownloadHistoryPage.js ---\nimport React, { useState } from 'react';\nimport { Container, Paper, Typography, Box, TextField, Button, Alert, CircularProgress } from '@mui/material';\nimport { useAuth } from '../../context/AuthContext'; // Verify this path is correct\nimport axios from 'axios';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport { useNavigate } from 'react-router-dom';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\n\n// Ensure your backend API base URL is correct\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:8080';\nexport default function EmployeeDownloadHistoryPage() {\n  _s();\n  const {\n    authState\n  } = useAuth(); // Get authentication state\n  const navigate = useNavigate();\n\n  // State for form inputs and component feedback\n  const [targetCustomerId, setTargetCustomerId] = useState('');\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [error, setError] = useState(''); // Holds error messages for display\n  const [loading, setLoading] = useState(false); // Tracks loading state for API call\n  const [successMessage, setSuccessMessage] = useState(''); // Holds success messages\n\n  /**\r\n   * Helper function to parse user-friendly error messages from Axios errors.\r\n   * @param {Error} err - The error object caught (typically an Axios error).\r\n   * @returns {string} A user-friendly error message string.\r\n   */\n  const getErrorMessage = err => {\n    let message = 'An unexpected error occurred. Please try again.'; // Default message\n    if (err.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.error(\"API Error Response:\", err.response); // Log details for debugging\n      const status = err.response.status;\n      const responseData = err.response.data;\n      if (status === 403) {\n        message = 'Forbidden: You do not have permission for this action.';\n      } else if (status === 404) {\n        // Use backend message if available (from Map), otherwise generic not found\n        message = (responseData === null || responseData === void 0 ? void 0 : responseData.message) || `Customer '${targetCustomerId}' not found.`;\n      } else if (status === 400) {\n        // Use backend message if available (from Map), otherwise generic bad request\n        message = (responseData === null || responseData === void 0 ? void 0 : responseData.message) || 'Bad Request: Please check your inputs.';\n      } else if (responseData !== null && responseData !== void 0 && responseData.message) {\n        // Try to extract message from standard {success: false, message: '...'} format\n        message = responseData.message;\n      } else if (typeof responseData === 'string' && responseData.length > 0 && responseData.length < 200) {\n        // If response is just a simple error string from backend\n        message = responseData;\n      } else if (err.response.statusText) {\n        // Fallback to HTTP status text if no better message found\n        message = `Error: ${status} ${err.response.statusText}`;\n      }\n    } else if (err.request) {\n      // The request was made but no response was received\n      console.error(\"API No Response Error:\", err.request);\n      message = 'Network Error: Could not connect to the server. Please check your connection.';\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.error('API Request Setup Error:', err.message);\n      message = `Error: ${err.message}`;\n    }\n    return message;\n  };\n\n  /**\r\n   * Handles the form submission to download the PDF.\r\n   * Performs validation, makes the API call, and triggers the download.\r\n   */\n  const handleDownload = async () => {\n    // Clear previous messages\n    setError('');\n    setSuccessMessage('');\n\n    // --- 1. Frontend Input Validation ---\n    let validationError = '';\n    if (!targetCustomerId || targetCustomerId.trim() === '') {\n      validationError = 'Please enter the Target Customer ID.';\n    } else if (!startDate) {\n      validationError = 'Please select a Start Date.';\n    } else if (!endDate) {\n      validationError = 'Please select an End Date.';\n    } else {\n      // Date comparison only if both dates are selected\n      const start = new Date(startDate);\n      const end = new Date(endDate);\n      // Add time to end date to make comparison inclusive of the end day\n      end.setHours(23, 59, 59, 999);\n      if (start > end) {\n        validationError = 'Start date cannot be after end date.';\n      }\n    }\n    if (validationError) {\n      setError(validationError);\n      return; // Stop if validation fails\n    }\n\n    // --- 2. Start Loading and Prepare API Call ---\n    setLoading(true);\n    const trimmedTargetCustomerId = targetCustomerId.trim(); // Use trimmed ID\n\n    // Construct URL for the employee-specific download endpoint\n    const downloadUrl = `${API_BASE_URL}//customer/${trimmedTargetCustomerId}/history/download?startDate=${startDate}&endDate=${endDate}`;\n    console.log(\"Requesting download from (Employee Endpoint):\", downloadUrl);\n\n    // --- 3. Make API Request ---\n    try {\n      var _response$data;\n      const response = await axios.get(downloadUrl, {\n        responseType: 'blob',\n        // Expect binary data (the PDF)\n        withCredentials: true // Send necessary authentication (cookies/headers)\n      });\n\n      // --- 4. Process Successful Response (PDF received) ---\n      // Double-check response status and content type\n      if (response.status === 200 && ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.type) === 'application/pdf') {\n        const blob = new Blob([response.data], {\n          type: 'application/pdf'\n        });\n        const url = window.URL.createObjectURL(blob);\n        const link = document.createElement('a');\n        link.href = url;\n\n        // Extract filename from Content-Disposition header (more robust)\n        const contentDisposition = response.headers['content-disposition'];\n        let filename = `transaction_history_${trimmedTargetCustomerId}_${startDate}_to_${endDate}.pdf`; // Default\n        if (contentDisposition) {\n          const filenameMatch = contentDisposition.match(/filename=\"?([^\"]+)\"?/i);\n          if (filenameMatch && filenameMatch.length > 1) {\n            filename = filenameMatch[1]; // Use filename from header if found\n          }\n        }\n        link.setAttribute('download', filename);\n        document.body.appendChild(link);\n        link.click(); // Simulate click to trigger download\n\n        // Clean up the temporary link and Blob URL\n        document.body.removeChild(link);\n        window.URL.revokeObjectURL(url);\n        console.log(`Transaction history download initiated for ${trimmedTargetCustomerId}.`);\n        setSuccessMessage(`Download started successfully for Customer ID: ${trimmedTargetCustomerId}!`);\n        // Optionally clear form fields after successful download\n        // setTargetCustomerId('');\n        // setStartDate('');\n        // setEndDate('');\n      } else {\n        // Handle unexpected success response (e.g., status 200 but not a PDF)\n        console.error(\"Received unexpected successful response:\", response);\n        // Attempt to read the blob as text to show potential error message\n        const reader = new FileReader();\n        reader.onload = e => {\n          try {\n            const errorJson = JSON.parse(e.target.result);\n            setError(errorJson.message || \"Download failed: Server returned unexpected data.\");\n          } catch (parseError) {\n            setError(`Download failed: ${e.target.result || 'Server returned non-PDF data.'}`);\n          }\n        };\n        reader.onerror = () => setError(\"Download failed: Could not read response data.\");\n        reader.readAsText(response.data);\n      }\n\n      // --- 5. Handle API Call Errors ---\n    } catch (err) {\n      console.error(`Error downloading history for ${trimmedTargetCustomerId}:`, err);\n      setError(getErrorMessage(err)); // Use helper to set user-friendly error\n    } finally {\n      // --- 6. Stop Loading ---\n      setLoading(false);\n    }\n  };\n\n  // --- 7. JSX Rendering ---\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"sm\",\n    sx: {\n      mt: 4,\n      mb: 4\n    },\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 3,\n      sx: {\n        p: {\n          xs: 2,\n          sm: 3,\n          md: 4\n        }\n      },\n      children: [\" \", /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          mb: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          component: \"h1\",\n          gutterBottom: true,\n          children: \"Download Customer History\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          size: \"small\",\n          startIcon: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 37\n          }, this),\n          onClick: () => navigate('/employee/dashboard') // Link back to dashboard\n          ,\n          children: \"Dashboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"text.secondary\",\n        sx: {\n          mb: 3\n        },\n        children: \"Enter the Customer ID and date range to download their transaction history as a PDF.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        component: \"form\",\n        onSubmit: e => {\n          e.preventDefault();\n          handleDownload();\n        },\n        noValidate: true,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Target Customer ID\",\n          id: \"targetCustomerId\" // Add id for accessibility\n          ,\n          value: targetCustomerId\n          // Clear other messages when this field changes\n          ,\n          onChange: e => {\n            setTargetCustomerId(e.target.value);\n            setError('');\n            setSuccessMessage('');\n          },\n          fullWidth: true,\n          required: true,\n          margin: \"normal\",\n          disabled: loading,\n          autoFocus: true // Focus this field first\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Start Date\",\n          id: \"startDate\" // Add id\n          ,\n          type: \"date\",\n          value: startDate,\n          onChange: e => {\n            setStartDate(e.target.value);\n            setError('');\n            setSuccessMessage('');\n          },\n          InputLabelProps: {\n            shrink: true\n          } // Keep label floated\n          ,\n          fullWidth: true,\n          required: true,\n          margin: \"normal\",\n          disabled: loading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"End Date\",\n          id: \"endDate\" // Add id\n          ,\n          type: \"date\",\n          value: endDate,\n          onChange: e => {\n            setEndDate(e.target.value);\n            setError('');\n            setSuccessMessage('');\n          },\n          InputLabelProps: {\n            shrink: true\n          },\n          fullWidth: true,\n          required: true,\n          margin: \"normal\",\n          disabled: loading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 21\n        }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"error\",\n          sx: {\n            width: '100%',\n            mt: 2,\n            mb: 1\n          },\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 25\n        }, this), successMessage && /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"success\",\n          sx: {\n            width: '100%',\n            mt: 2,\n            mb: 1\n          },\n          children: successMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\" // Works with the form's onSubmit\n          ,\n          variant: \"contained\",\n          color: \"primary\"\n          // Disable button if loading or required fields are empty\n          ,\n          disabled: loading || !targetCustomerId || !startDate || !endDate,\n          fullWidth: true,\n          size: \"large\",\n          sx: {\n            mt: 2\n          },\n          startIcon: loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 20,\n            color: \"inherit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 46\n          }, this) : /*#__PURE__*/_jsxDEV(DownloadIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 95\n          }, this),\n          children: loading ? 'Generating...' : 'Download PDF'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 9\n  }, this);\n}\n_s(EmployeeDownloadHistoryPage, \"D+oXdBEhhBoxuq8g6n8eU6HAN2g=\", false, function () {\n  return [useAuth, useNavigate];\n});\n_c = EmployeeDownloadHistoryPage;\nvar _c;\n$RefreshReg$(_c, \"EmployeeDownloadHistoryPage\");","map":{"version":3,"names":["React","useState","Container","Paper","Typography","Box","TextField","Button","Alert","CircularProgress","useAuth","axios","DownloadIcon","useNavigate","ArrowBackIcon","jsxDEV","_jsxDEV","API_BASE_URL","EmployeeDownloadHistoryPage","_s","authState","navigate","targetCustomerId","setTargetCustomerId","startDate","setStartDate","endDate","setEndDate","error","setError","loading","setLoading","successMessage","setSuccessMessage","getErrorMessage","err","message","response","console","status","responseData","data","length","statusText","request","handleDownload","validationError","trim","start","Date","end","setHours","trimmedTargetCustomerId","downloadUrl","log","_response$data","get","responseType","withCredentials","type","blob","Blob","url","window","URL","createObjectURL","link","document","createElement","href","contentDisposition","headers","filename","filenameMatch","match","setAttribute","body","appendChild","click","removeChild","revokeObjectURL","reader","FileReader","onload","e","errorJson","JSON","parse","target","result","parseError","onerror","readAsText","maxWidth","sx","mt","mb","children","elevation","p","xs","sm","md","display","justifyContent","alignItems","variant","component","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","size","startIcon","onClick","color","onSubmit","preventDefault","noValidate","label","id","value","onChange","fullWidth","required","margin","disabled","autoFocus","InputLabelProps","shrink","severity","width","_c","$RefreshReg$"],"sources":["C:/Users/somna/Documents/Java_Backend/Banking/frontend_section/src/component/Page/TransactionHistoryPage.js"],"sourcesContent":["// --- src/component/Page/Employee/EmployeeDownloadHistoryPage.js ---\r\nimport React, { useState } from 'react';\r\nimport { Container, Paper, Typography, Box, TextField, Button, Alert, CircularProgress } from '@mui/material';\r\nimport { useAuth } from '../../context/AuthContext'; // Verify this path is correct\r\nimport axios from 'axios';\r\nimport DownloadIcon from '@mui/icons-material/Download';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\n\r\n// Ensure your backend API base URL is correct\r\nconst API_BASE_URL = 'http://localhost:8080';\r\n\r\nexport default function EmployeeDownloadHistoryPage() {\r\n    const { authState } = useAuth(); // Get authentication state\r\n    const navigate = useNavigate();\r\n\r\n    // State for form inputs and component feedback\r\n    const [targetCustomerId, setTargetCustomerId] = useState('');\r\n    const [startDate, setStartDate] = useState('');\r\n    const [endDate, setEndDate] = useState('');\r\n    const [error, setError] = useState(''); // Holds error messages for display\r\n    const [loading, setLoading] = useState(false); // Tracks loading state for API call\r\n    const [successMessage, setSuccessMessage] = useState(''); // Holds success messages\r\n\r\n    /**\r\n     * Helper function to parse user-friendly error messages from Axios errors.\r\n     * @param {Error} err - The error object caught (typically an Axios error).\r\n     * @returns {string} A user-friendly error message string.\r\n     */\r\n    const getErrorMessage = (err) => {\r\n        let message = 'An unexpected error occurred. Please try again.'; // Default message\r\n        if (err.response) {\r\n            // The request was made and the server responded with a status code\r\n            // that falls out of the range of 2xx\r\n            console.error(\"API Error Response:\", err.response); // Log details for debugging\r\n            const status = err.response.status;\r\n            const responseData = err.response.data;\r\n\r\n            if (status === 403) {\r\n                message = 'Forbidden: You do not have permission for this action.';\r\n            } else if (status === 404) {\r\n                // Use backend message if available (from Map), otherwise generic not found\r\n                message = responseData?.message || `Customer '${targetCustomerId}' not found.`;\r\n            } else if (status === 400) {\r\n                 // Use backend message if available (from Map), otherwise generic bad request\r\n                 message = responseData?.message || 'Bad Request: Please check your inputs.';\r\n            } else if (responseData?.message) {\r\n                // Try to extract message from standard {success: false, message: '...'} format\r\n                message = responseData.message;\r\n            } else if (typeof responseData === 'string' && responseData.length > 0 && responseData.length < 200) {\r\n                // If response is just a simple error string from backend\r\n                message = responseData;\r\n            } else if (err.response.statusText) {\r\n                 // Fallback to HTTP status text if no better message found\r\n                 message = `Error: ${status} ${err.response.statusText}`;\r\n            }\r\n        } else if (err.request) {\r\n            // The request was made but no response was received\r\n            console.error(\"API No Response Error:\", err.request);\r\n            message = 'Network Error: Could not connect to the server. Please check your connection.';\r\n        } else {\r\n            // Something happened in setting up the request that triggered an Error\r\n            console.error('API Request Setup Error:', err.message);\r\n            message = `Error: ${err.message}`;\r\n        }\r\n        return message;\r\n    };\r\n\r\n    /**\r\n     * Handles the form submission to download the PDF.\r\n     * Performs validation, makes the API call, and triggers the download.\r\n     */\r\n    const handleDownload = async () => {\r\n        // Clear previous messages\r\n        setError('');\r\n        setSuccessMessage('');\r\n\r\n        // --- 1. Frontend Input Validation ---\r\n        let validationError = '';\r\n        if (!targetCustomerId || targetCustomerId.trim() === '') {\r\n            validationError = 'Please enter the Target Customer ID.';\r\n        } else if (!startDate) {\r\n            validationError = 'Please select a Start Date.';\r\n        } else if (!endDate) {\r\n            validationError = 'Please select an End Date.';\r\n        } else {\r\n            // Date comparison only if both dates are selected\r\n            const start = new Date(startDate);\r\n            const end = new Date(endDate);\r\n            // Add time to end date to make comparison inclusive of the end day\r\n            end.setHours(23, 59, 59, 999);\r\n            if (start > end) {\r\n                validationError = 'Start date cannot be after end date.';\r\n            }\r\n        }\r\n\r\n        if (validationError) {\r\n            setError(validationError);\r\n            return; // Stop if validation fails\r\n        }\r\n\r\n        // --- 2. Start Loading and Prepare API Call ---\r\n        setLoading(true);\r\n        const trimmedTargetCustomerId = targetCustomerId.trim(); // Use trimmed ID\r\n\r\n        // Construct URL for the employee-specific download endpoint\r\n        const downloadUrl = `${API_BASE_URL}//customer/${trimmedTargetCustomerId}/history/download?startDate=${startDate}&endDate=${endDate}`;\r\n        console.log(\"Requesting download from (Employee Endpoint):\", downloadUrl);\r\n\r\n        // --- 3. Make API Request ---\r\n        try {\r\n            const response = await axios.get(downloadUrl, {\r\n                responseType: 'blob', // Expect binary data (the PDF)\r\n                withCredentials: true // Send necessary authentication (cookies/headers)\r\n            });\r\n\r\n            // --- 4. Process Successful Response (PDF received) ---\r\n            // Double-check response status and content type\r\n            if (response.status === 200 && response.data?.type === 'application/pdf') {\r\n                const blob = new Blob([response.data], { type: 'application/pdf' });\r\n                const url = window.URL.createObjectURL(blob);\r\n                const link = document.createElement('a');\r\n                link.href = url;\r\n\r\n                // Extract filename from Content-Disposition header (more robust)\r\n                const contentDisposition = response.headers['content-disposition'];\r\n                let filename = `transaction_history_${trimmedTargetCustomerId}_${startDate}_to_${endDate}.pdf`; // Default\r\n                if (contentDisposition) {\r\n                    const filenameMatch = contentDisposition.match(/filename=\"?([^\"]+)\"?/i);\r\n                    if (filenameMatch && filenameMatch.length > 1) {\r\n                        filename = filenameMatch[1]; // Use filename from header if found\r\n                    }\r\n                }\r\n\r\n                link.setAttribute('download', filename);\r\n                document.body.appendChild(link);\r\n                link.click(); // Simulate click to trigger download\r\n\r\n                // Clean up the temporary link and Blob URL\r\n                document.body.removeChild(link);\r\n                window.URL.revokeObjectURL(url);\r\n\r\n                console.log(`Transaction history download initiated for ${trimmedTargetCustomerId}.`);\r\n                setSuccessMessage(`Download started successfully for Customer ID: ${trimmedTargetCustomerId}!`);\r\n                // Optionally clear form fields after successful download\r\n                // setTargetCustomerId('');\r\n                // setStartDate('');\r\n                // setEndDate('');\r\n\r\n            } else {\r\n                // Handle unexpected success response (e.g., status 200 but not a PDF)\r\n                console.error(\"Received unexpected successful response:\", response);\r\n                // Attempt to read the blob as text to show potential error message\r\n                const reader = new FileReader();\r\n                reader.onload = (e) => {\r\n                    try {\r\n                        const errorJson = JSON.parse(e.target.result);\r\n                        setError(errorJson.message || \"Download failed: Server returned unexpected data.\");\r\n                    } catch (parseError) {\r\n                        setError(`Download failed: ${e.target.result || 'Server returned non-PDF data.'}`);\r\n                    }\r\n                }\r\n                reader.onerror = () => setError(\"Download failed: Could not read response data.\");\r\n                reader.readAsText(response.data);\r\n            }\r\n\r\n        // --- 5. Handle API Call Errors ---\r\n        } catch (err) {\r\n            console.error(`Error downloading history for ${trimmedTargetCustomerId}:`, err);\r\n            setError(getErrorMessage(err)); // Use helper to set user-friendly error\r\n        } finally {\r\n            // --- 6. Stop Loading ---\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // --- 7. JSX Rendering ---\r\n    return (\r\n        <Container maxWidth=\"sm\" sx={{ mt: 4, mb: 4 }}>\r\n            <Paper elevation={3} sx={{ p: { xs: 2, sm: 3, md: 4 } }}> {/* Responsive padding */}\r\n                 <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n                      <Typography variant=\"h5\" component=\"h1\" gutterBottom>\r\n                         Download Customer History\r\n                     </Typography>\r\n                     <Button\r\n                         variant=\"outlined\"\r\n                         size=\"small\"\r\n                         startIcon={<ArrowBackIcon />}\r\n                         onClick={() => navigate('/employee/dashboard')} // Link back to dashboard\r\n                     >\r\n                         Dashboard\r\n                     </Button>\r\n                 </Box>\r\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n                    Enter the Customer ID and date range to download their transaction history as a PDF.\r\n                </Typography>\r\n\r\n                 {/* Form wrapper for accessibility and Enter key submission */}\r\n                 <Box component=\"form\" onSubmit={(e) => { e.preventDefault(); handleDownload(); }} noValidate>\r\n                    {/* Input Fields */}\r\n                    <TextField\r\n                        label=\"Target Customer ID\"\r\n                        id=\"targetCustomerId\" // Add id for accessibility\r\n                        value={targetCustomerId}\r\n                        // Clear other messages when this field changes\r\n                        onChange={(e) => { setTargetCustomerId(e.target.value); setError(''); setSuccessMessage(''); }}\r\n                        fullWidth\r\n                        required\r\n                        margin=\"normal\"\r\n                        disabled={loading}\r\n                        autoFocus // Focus this field first\r\n                    />\r\n                     <TextField\r\n                        label=\"Start Date\"\r\n                        id=\"startDate\" // Add id\r\n                        type=\"date\"\r\n                        value={startDate}\r\n                        onChange={(e) => { setStartDate(e.target.value); setError(''); setSuccessMessage(''); }}\r\n                        InputLabelProps={{ shrink: true }} // Keep label floated\r\n                        fullWidth\r\n                        required\r\n                        margin=\"normal\"\r\n                        disabled={loading}\r\n                    />\r\n                    <TextField\r\n                        label=\"End Date\"\r\n                        id=\"endDate\" // Add id\r\n                        type=\"date\"\r\n                        value={endDate}\r\n                        onChange={(e) => { setEndDate(e.target.value); setError(''); setSuccessMessage(''); }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        fullWidth\r\n                        required\r\n                        margin=\"normal\"\r\n                        disabled={loading}\r\n                    />\r\n\r\n                    {/* Display Error Message */}\r\n                    {error && (\r\n                        <Alert severity=\"error\" sx={{ width: '100%', mt: 2, mb: 1 }}>\r\n                            {error}\r\n                        </Alert>\r\n                    )}\r\n                    {/* Display Success Message */}\r\n                    {successMessage && (\r\n                        <Alert severity=\"success\" sx={{ width: '100%', mt: 2, mb: 1 }}>\r\n                            {successMessage}\r\n                        </Alert>\r\n                    )}\r\n\r\n                    {/* Submit Button */}\r\n                    <Button\r\n                        type=\"submit\" // Works with the form's onSubmit\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        // Disable button if loading or required fields are empty\r\n                        disabled={loading || !targetCustomerId || !startDate || !endDate}\r\n                        fullWidth\r\n                        size=\"large\"\r\n                        sx={{ mt: 2 }}\r\n                        startIcon={loading ? <CircularProgress size={20} color=\"inherit\" /> : <DownloadIcon />}\r\n                    >\r\n                        {loading ? 'Generating...' : 'Download PDF'}\r\n                    </Button>\r\n                 </Box>\r\n            </Paper>\r\n        </Container>\r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}